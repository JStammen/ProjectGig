<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Namespaces>
  <Namespace Name="OpenSource.UPnP">
   <Messages>
    <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'Pn' in namespace name 'OpenSource.UPnP' by changing it to 'PN'.</Issue>
    </Message>
    <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in namespace name 'OpenSource.UPnP'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="OpenSource.Utilities">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'OpenSource.Utilities' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="D:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP\bin\Debug\UPnP.dll">
   <Modules>
    <Module Name="upnp.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'UPnP.dll' with a strong name key.</Issue>
      </Message>
      <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="85" Level="Error">Correct the casing of 'Pn' in assembly name 'UPnP.dll' by changing it to 'PN'.</Issue>
      </Message>
      <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in assembly name 'UPnP.dll'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'UPnP.dll' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
       <Issue Name="NoAttribute" Certainty="95" Level="CriticalError">Because 'UPnP.dll' exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'UPnP.dll' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="OpenSource.UPnP">
       <Types>
        <Type Name="AsyncSocket" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'AsyncSocket' because it creates members of the following IDisposable types: 'Socket'. If 'AsyncSocket' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Buffer" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="40">In member 'AsyncSocket.AsyncSocket(int)', correct the casing of 'Buffer' in parameter name 'BufferSize' by changing it to 'buffer'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Write" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="40">In member 'AsyncSocket.AsyncSocket(Stream)', correct the casing of 'Write' in parameter name 'WriteStream' by changing it to 'write'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddMembership(System.Net.IPEndPoint,System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="280">Modify 'AsyncSocket.AddMembership(IPEndPoint, IPAddress)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="291">Modify 'AsyncSocket.AddMembership(IPEndPoint, IPAddress)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="300">Modify 'AsyncSocket.AddMembership(IPEndPoint, IPAddress)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Multicast" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="275">In member 'AsyncSocket.AddMembership(IPEndPoint, IPAddress)', correct the casing of 'Multicast' in parameter name 'MulticastAddress' by changing it to 'multicast'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="298">In externally visible method 'AsyncSocket.AddMembership(IPEndPoint, IPAddress)', validate parameter 'local' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="294">In externally visible method 'AsyncSocket.AddMembership(IPEndPoint, IPAddress)', validate parameter 'MulticastAddress' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Attach(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="234">'AsyncSocket.Attach(IPEndPoint, ProtocolType)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="P" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="204">In member 'AsyncSocket.Attach(IPEndPoint, ProtocolType)', correct the casing of 'P' in parameter name 'PType' by changing it to 'p'.</Issue>
            </Message>
            <Message Id="P" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="204">In method 'AsyncSocket.Attach(IPEndPoint, ProtocolType)', correct the spelling of 'P' in parameter name 'PType' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="214">In externally visible method 'AsyncSocket.Attach(IPEndPoint, ProtocolType)', validate parameter 'local' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Attach(System.Net.Sockets.Socket)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Use" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="242">In member 'AsyncSocket.Attach(Socket)', correct the casing of 'Use' in parameter name 'UseThisSocket' by changing it to 'use'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="243">In externally visible method 'AsyncSocket.Attach(Socket)', validate parameter 'UseThisSocket' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Begin()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="423">Modify 'AsyncSocket.Begin()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="466">Modify 'AsyncSocket.Begin()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BufferBeginPointer" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AsyncSocket.BufferBeginPointer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BufferReadLength" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AsyncSocket.BufferReadLength' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BufferSize" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'AsyncSocket.BufferSize' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Close()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="519">Modify 'AsyncSocket.Close()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Connect(System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="362">Consider changing the type of parameter 'Remote' in 'AsyncSocket.Connect(IPEndPoint)' from 'IPEndPoint' to its base type 'EndPoint'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="365">'AsyncSocket.Connect(IPEndPoint)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Remote" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="362">In member 'AsyncSocket.Connect(IPEndPoint)', correct the casing of 'Remote' in parameter name 'Remote' by changing it to 'remote'.</Issue>
            </Message>
            <Message Id="StreamSocket" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="365">Correct the spelling of the unrecognized token 'StreamSocket' in the literal '"Cannot connect a non StreamSocket"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DropMembership(System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Multicast" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="311">In member 'AsyncSocket.DropMembership(IPAddress)', correct the casing of 'Multicast' in parameter name 'MulticastAddress' by changing it to 'multicast'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleConnect(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="385">Modify 'AsyncSocket.HandleConnect(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="xx" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="388">'AsyncSocket.HandleConnect(IAsyncResult)' declares a variable, 'xx', of type 'Exception', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleReceive(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="745">'AsyncSocket.HandleReceive(IAsyncResult)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="764">Modify 'AsyncSocket.HandleReceive(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="798">Modify 'AsyncSocket.HandleReceive(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="888">Modify 'AsyncSocket.HandleReceive(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleSend(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="675">Modify 'AsyncSocket.HandleSend(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="700">Modify 'AsyncSocket.HandleSend(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="738">Modify 'AsyncSocket.HandleSend(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocalEP" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'AsyncSocket.LocalEP' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoteEP" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'AsyncSocket.RemoteEP' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Send(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="578">In method 'AsyncSocket.Send(byte[], int, int, IPEndPoint)', correct the spelling of 'dest' in parameter name 'dest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Send(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="624">Modify 'AsyncSocket.Send(byte[], int, int, IPEndPoint, object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="591">In member 'AsyncSocket.Send(byte[], int, int, IPEndPoint, object)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="591">In method 'AsyncSocket.Send(byte[], int, int, IPEndPoint, object)', correct the spelling of 'dest' in parameter name 'dest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Send(System.Byte[],System.Int32,System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="573">In member 'AsyncSocket.Send(byte[], int, int, object)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Send(System.Byte[],System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="561">In member 'AsyncSocket.Send(byte[], object)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="562">In externally visible method 'AsyncSocket.Send(byte[], object)', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetTTL(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TTL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="266">Correct the casing of 'TTL' in member name 'AsyncSocket.SetTTL(int)' by changing it to 'Ttl'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="266">In member 'AsyncSocket.SetTTL(int)', correct the casing of 'TTL' in parameter name 'TTL' by changing it to 'ttl'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnConnect" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="128">Declare the first parameter of 'AsyncSocket.ConnectHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="128">Declare the second parameter of 'AsyncSocket.ConnectHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="128">Rename 'AsyncSocket.ConnectHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnConnectFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="142">Declare the first parameter of 'AsyncSocket.ConnectHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="142">Declare the second parameter of 'AsyncSocket.ConnectHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="142">Rename 'AsyncSocket.ConnectHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnDisconnect" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="156">Declare the first parameter of 'AsyncSocket.ConnectHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="156">Declare the second parameter of 'AsyncSocket.ConnectHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="156">Rename 'AsyncSocket.ConnectHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnReceive" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="92">Declare the first parameter of 'AsyncSocket.OnReceiveHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="92">Declare the second parameter of 'AsyncSocket.OnReceiveHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="92">Remove all but the first two parameters of 'AsyncSocket.OnReceiveHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="92">Rename 'AsyncSocket.OnReceiveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSendReady" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="109">Declare the first parameter of 'AsyncSocket.OnSendReadyHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="109">Declare the second parameter of 'AsyncSocket.OnSendReadyHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="109">Rename 'AsyncSocket.OnSendReadyHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AsyncSocket+ConnectHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'AsyncSocket.ConnectHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncSocket+OnReceiveHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Buffer" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'AsyncSocket.OnReceiveHandler', correct the casing of 'Buffer' in parameter name 'BufferSize' by changing it to 'buffer'.</Issue>
          </Message>
          <Message Id="Bytes" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'AsyncSocket.OnReceiveHandler', correct the casing of 'Bytes' in parameter name 'BytesRead' by changing it to 'bytes'.</Issue>
          </Message>
          <Message Id="Head" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'AsyncSocket.OnReceiveHandler', correct the casing of 'Head' in parameter name 'HeadPointer' by changing it to 'head'.</Issue>
          </Message>
          <Message Id="pointer" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="LanguageIndependentDelegateParameter" Certainty="75" Level="Error">In delegate 'AsyncSocket.OnReceiveHandler', consider replacing the data type identifier 'Pointer' in parameter name 'HeadPointer' with a more generic term, such as 'value'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'AsyncSocket.OnReceiveHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncSocket+OnSendReadyHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'AsyncSocket.OnSendReadyHandler', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'AsyncSocket.OnSendReadyHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="AsyncSocket+StopReadException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'AsyncSocket.StopReadException': protected StopReadException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'AsyncSocket.StopReadException': public StopReadException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'AsyncSocket.StopReadException': public StopReadException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'AsyncSocket.StopReadException' as this type implements ISerializable.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'AsyncSocket.StopReadException'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="StopRead" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AsyncSocket.cs" Line="34">Correct the spelling of the unrecognized token 'StopRead' in the literal '"User initiated StopRead"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AutoUpdate" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="newversion" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="25">In method 'AutoUpdate.AutoUpdate(int)', correct the spelling of 'newversion' in parameter name 'newversion' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AutoUpdateCheck(System.Windows.Forms.Form)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="185">Modify 'AutoUpdate.AutoUpdateCheck(Form)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#existingversion" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="existingversion" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'existingversion' in member name 'AutoUpdate.existingversion' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'AutoUpdate.existingversion' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForceUpdate()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="292">Modify 'AutoUpdate.ForceUpdate()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="277">'AutoUpdate.ForceUpdate()' calls into 'Process.Start(ProcessStartInfo)' which has a LinkDemand. By making this call, 'Process.Start(ProcessStartInfo)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'AutoUpdate.ForceUpdate()'&#xD;&#xA;   -&gt;'AutoUpdate.ForceUpdate()'</Issue>
            </Message>
            <Message Id="process" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="290">'AutoUpdate.ForceUpdate()' declares a variable, 'process', of type 'Process', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="288">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ForceUpdate()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAutoUpdateCheck()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="170">Because the behavior of 'DateTime.Parse(string)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.GetAutoUpdateCheck()' with a call to 'DateTime.Parse(string, IFormatProvider)'. If the result of 'DateTime.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="165">Change 'AutoUpdate.GetAutoUpdateCheck()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetGlobalRegKey()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="123">Change 'AutoUpdate.GetGlobalRegKey()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetVersionStr(System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="23">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.GetVersionStr(int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="75">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "A new version of the tools are available for download. Click \"Update\" to perfo...".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="52">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Cancel".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="88">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Check for updates".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="99">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Current Version".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="164">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Developer Tools for UPnP Technology update".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="108">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "New Version".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="63">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Update".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="144">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Version Information".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="117">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "v0.00".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.designer.cs" Line="127">Method 'AutoUpdate.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "v0.00".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MeshToolsUpdate_Load(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="76">Method 'AutoUpdate.MeshToolsUpdate_Load(object, EventArgs)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "v".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="77">Method 'AutoUpdate.MeshToolsUpdate_Load(object, EventArgs)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "v".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadUpdateSettings()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="94">'AutoUpdate.ReadUpdateSettings()' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="92">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReadUpdateSettings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="93">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReadUpdateSettings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="94">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReadUpdateSettings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="95">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReadUpdateSettings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="96">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReadUpdateSettings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="97">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReadUpdateSettings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="98">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReadUpdateSettings()' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReportCrash(System.String,System.Exception)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="321">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReportCrash(string, Exception)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="325">In externally visible method 'AutoUpdate.ReportCrash(string, Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReportCrash(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="313">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.ReportCrash(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#requestor_OnRequestCompleted(OpenSource.UPnP.HttpRequestor,System.Boolean,System.Object,System.String,System.Byte[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="251">Modify 'AutoUpdate.requestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="updatelink" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="218">'AutoUpdate.requestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' declares a variable, 'updatelink', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="223">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.requestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="240">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.requestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="224">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.requestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="232">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.requestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="242">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'AutoUpdate.requestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetAutoUpdateCheck(System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="autoupdate" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="135">In method 'AutoUpdate.SetAutoUpdateCheck(bool)', correct the spelling of 'autoupdate' in parameter name 'autoupdate' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetAutoUpdateCheckNow(System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="autoupdate" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="150">In method 'AutoUpdate.SetAutoUpdateCheckNow(bool)', correct the spelling of 'autoupdate' in parameter name 'autoupdate' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowMainSite()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="AutoUpdate.cs" Line="30">'AutoUpdate.ShowMainSite()' calls into 'Process.Start(string)' which has a LinkDemand. By making this call, 'Process.Start(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'AutoUpdate.ShowMainSite()'&#xD;&#xA;   -&gt;'AutoUpdate.ShowMainSite()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#updatecode" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="updatecode" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'updatecode' in member name 'AutoUpdate.updatecode' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'AutoUpdate.updatecode' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Base64" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'Base64' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Base64ToString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="b" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="47">In method 'Base64.Base64ToString(string)', correct the spelling of 'b' in parameter name 'b64' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Decode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="105">In method 'Base64.Decode(string)', call System.IDisposable.Dispose on object 'x' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Text" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="104">In member 'Base64.Decode(string)', correct the casing of 'Text' in parameter name 'Text' by changing it to 'text'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encode(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="59">In externally visible method 'Base64.Encode(byte[])', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Encode(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="74">In method 'Base64.Encode(byte[], int, int)', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="72">In method 'Base64.Encode(byte[], int, int)', call System.IDisposable.Dispose on object 'x' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StringToBase64(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="35">In member 'Base64.StringToBase64(string)', correct the casing of 'The' in parameter name 'TheString' by changing it to 'the'.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Base64.cs" Line="35">In member 'Base64.StringToBase64(string)', consider replacing the data type identifier 'String' in parameter name 'TheString' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DelayedResponseException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DelayedResponseException': protected DelayedResponseException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DelayedResponseException': public DelayedResponseException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'DelayedResponseException': public DelayedResponseException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'DelayedResponseException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ResponseWillReturnLater" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="66">Correct the spelling of the unrecognized token 'ResponseWillReturnLater' in the literal '"ResponseWillReturnLater"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DText" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="STR" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="33">In member 'DText.DText(string)', correct the casing of 'STR' in parameter name 'STR' by changing it to 'str'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ATTRMARK" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DText.ATTRMARK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DCOUNT()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DCOUNT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="48">Correct the casing of 'DCOUNT' in member name 'DText.DCOUNT()' by changing it to 'Dcount'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DCOUNT(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="A" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="52">In member 'DText.DCOUNT(int)', correct the casing of 'A' in parameter name 'A' by changing it to 'a'.</Issue>
            </Message>
            <Message Id="DCOUNT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="52">Correct the casing of 'DCOUNT' in member name 'DText.DCOUNT(int)' by changing it to 'Dcount'.</Issue>
            </Message>
            <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="52">In method 'DText.DCOUNT(int)', consider providing a more meaningful name than parameter name 'A'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DCOUNT(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="A" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="58">In member 'DText.DCOUNT(int, int)', correct the casing of 'A' in parameter name 'A' by changing it to 'a'.</Issue>
            </Message>
            <Message Id="DCOUNT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="58">Correct the casing of 'DCOUNT' in member name 'DText.DCOUNT(int, int)' by changing it to 'Dcount'.</Issue>
            </Message>
            <Message Id="M" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="58">In member 'DText.DCOUNT(int, int)', correct the casing of 'M' in parameter name 'M' by changing it to 'm'.</Issue>
            </Message>
            <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="58">In method 'DText.DCOUNT(int, int)', consider providing a more meaningful name than parameter name 'A'.</Issue>
            </Message>
            <Message Id="M" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="58">In method 'DText.DCOUNT(int, int)', consider providing a more meaningful name than parameter name 'M'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32,System.Int32,System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="A" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="175">In member 'DText.this[int, int, int]', correct the casing of 'A' in parameter name 'A' by changing it to 'a'.</Issue>
            </Message>
            <Message Id="M" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="175">In member 'DText.this[int, int, int]', correct the casing of 'M' in parameter name 'M' by changing it to 'm'.</Issue>
            </Message>
            <Message Id="V" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="175">In member 'DText.this[int, int, int]', correct the casing of 'V' in parameter name 'V' by changing it to 'v'.</Issue>
            </Message>
            <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="175">In method 'DText.this[int, int, int]', consider providing a more meaningful name than parameter name 'A'.</Issue>
            </Message>
            <Message Id="M" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="175">In method 'DText.this[int, int, int]', consider providing a more meaningful name than parameter name 'M'.</Issue>
            </Message>
            <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="175">In method 'DText.this[int, int, int]', consider providing a more meaningful name than parameter name 'V'.</Issue>
            </Message>
            <Message TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="175">Redesign indexer 'DText.this[int, int, int]' to use a single string or integer value as its index.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#get_Item(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="182">Modify 'DText.this.get(int, int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
              </Message>
              <Message Id="A-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="180">Correct the potential overflow in the operation 'A-1' in 'DText.this.get(int, int, int)'.</Issue>
              </Message>
              <Message Id="M-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="180">Correct the potential overflow in the operation 'M-1' in 'DText.this.get(int, int, int)'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#Item[System.Int32,System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="A" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="126">In member 'DText.this[int, int]', correct the casing of 'A' in parameter name 'A' by changing it to 'a'.</Issue>
            </Message>
            <Message Id="M" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="126">In member 'DText.this[int, int]', correct the casing of 'M' in parameter name 'M' by changing it to 'm'.</Issue>
            </Message>
            <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="126">In method 'DText.this[int, int]', consider providing a more meaningful name than parameter name 'A'.</Issue>
            </Message>
            <Message Id="M" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="126">In method 'DText.this[int, int]', consider providing a more meaningful name than parameter name 'M'.</Issue>
            </Message>
            <Message TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="126">Redesign indexer 'DText.this[int, int]' to use a single string or integer value as its index.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Item[System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="A" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="68">In member 'DText.this[int]', correct the casing of 'A' in parameter name 'A' by changing it to 'a'.</Issue>
            </Message>
            <Message Id="A" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="DText.cs" Line="68">In method 'DText.this[int]', consider providing a more meaningful name than parameter name 'A'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MULTMARK" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DText.MULTMARK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SUBVMARK" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'DText.SUBVMARK' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPMessage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="HTTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'HTTP' in type name 'HTTPMessage' by changing it to 'Http'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddTag(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="179">In member 'HTTPMessage.AddTag(string, string)', correct the casing of 'Tag' in parameter name 'TagData' by changing it to 'tag'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="179">In member 'HTTPMessage.AddTag(string, string)', correct the casing of 'Tag' in parameter name 'TagName' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="180">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.AddTag(string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="180">In externally visible method 'HTTPMessage.AddTag(string, string)', validate parameter 'TagName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AppendTag(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="184">In member 'HTTPMessage.AppendTag(string, string)', correct the casing of 'Tag' in parameter name 'TagData' by changing it to 'tag'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="184">In member 'HTTPMessage.AppendTag(string, string)', correct the casing of 'Tag' in parameter name 'TagName' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="185">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.AppendTag(string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="187">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.AppendTag(string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="191">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.AppendTag(string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="194">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.AppendTag(string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="195">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.AppendTag(string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="197">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.AppendTag(string, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="185">In externally visible method 'HTTPMessage.AppendTag(string, string)', validate parameter 'TagName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BodyBuffer" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="63">Change 'HTTPMessage.BodyBuffer' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildPacket()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="437">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.BuildPacket()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="459">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.BuildPacket()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="465">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.BuildPacket()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="424">Replace the call to 'string.operator !=(string, string)' in 'HTTPMessage.BuildPacket()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="426">Replace the call to 'string.operator !=(string, string)' in 'HTTPMessage.BuildPacket()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="461">Replace the call to 'string.operator !=(string, string)' in 'HTTPMessage.BuildPacket()' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="412">Replace the call to 'string.operator ==(string, string)' in 'HTTPMessage.BuildPacket()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CharSet" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_CharSet()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="90">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.CharSet.get()' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="92">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.CharSet.get()' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="97">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.CharSet.get()' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="93">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.CharSet.get()' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#EscapeString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="542">In member 'HTTPMessage.EscapeString(string)', correct the casing of 'The' in parameter name 'TheString' by changing it to 'the'.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="542">In member 'HTTPMessage.EscapeString(string)', consider replacing the data type identifier 'String' in parameter name 'TheString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.Byte.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="562">Because the behavior of 'byte.ToString(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.EscapeString(string)' with a call to 'byte.ToString(string, IFormatProvider)'. If the result of 'byte.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHeaderEnumerator()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="169">Change 'HTTPMessage.GetHeaderEnumerator()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTag(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="211">In member 'HTTPMessage.GetTag(string)', correct the casing of 'Tag' in parameter name 'TagName' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="212">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.GetTag(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="212">In externally visible method 'HTTPMessage.GetTag(string)', validate parameter 'TagName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HasTag(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="202">In member 'HTTPMessage.HasTag(string)', correct the casing of 'Tag' in parameter name 'TagName' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="203">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.HasTag(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="203">In externally visible method 'HTTPMessage.HasTag(string)', validate parameter 'TagName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocalEndPoint" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPMessage.LocalEndPoint' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OverrideContentLength" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPMessage.OverrideContentLength' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseByteArray(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="265">In externally visible method 'HTTPMessage.ParseByteArray(byte[])', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseByteArray(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="306">Modify 'HTTPMessage.ParseByteArray(byte[], int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="364">Modify 'HTTPMessage.ParseByteArray(byte[], int, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="indx" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="275">In method 'HTTPMessage.ParseByteArray(byte[], int, int)', correct the spelling of 'indx' in parameter name 'indx' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="296">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="316">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="298">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="362">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="282">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="299">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="323">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="324">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="300">Because the behavior of 'string.IndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.IndexOf(string, int, StringComparison)'. If the result of 'string.IndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="315">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="296">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="316">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="335">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="335">Replace the call to 'string.operator !=(string, string)' in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="345">Replace the call to 'string.operator ==(string, string)' in 'HTTPMessage.ParseByteArray(byte[], int, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RawPacket" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="253">Change 'HTTPMessage.RawPacket' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoteEndPoint" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPMessage.RemoteEndPoint' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveTag(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="162">Modify 'HTTPMessage.RemoveTag(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="157">In member 'HTTPMessage.RemoveTag(string)', correct the casing of 'Tag' in parameter name 'TagName' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="160">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.RemoveTag(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="160">In externally visible method 'HTTPMessage.RemoveTag(string)', validate parameter 'TagName' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StateObject" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPMessage.StateObject' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnEscapeString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnEscape" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="574">The compound word 'UnEscape' in member name 'HTTPMessage.UnEscapeString(string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Unescape' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="574">In member 'HTTPMessage.UnEscapeString(string)', correct the casing of 'The' in parameter name 'TheString' by changing it to 'the'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="574">Correct the casing of 'Un' in member name 'HTTPMessage.UnEscapeString(string)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="574">In member 'HTTPMessage.UnEscapeString(string)', consider replacing the data type identifier 'String' in parameter name 'TheString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="588">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.UnEscapeString(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="588">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'HTTPMessage.UnEscapeString(string)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPMessage.cs" Line="575">In externally visible method 'HTTPMessage.UnEscapeString(string)', validate parameter 'TheString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Version" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPMessage.Version' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="HTTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'HTTP' in type name 'HTTPRequest' by changing it to 'Http'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CloseSink(OpenSource.UPnP.HTTPSession)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="508">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPRequest.CloseSink(HTTPSession)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ContinueRequest(System.Net.IPEndPoint,System.String,System.Object,OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="304">Modify 'HTTPRequest.ContinueRequest(IPEndPoint, string, object, HTTPMessage)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NeedSend" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="260">'HTTPRequest.ContinueRequest(IPEndPoint, string, object, HTTPMessage)' declares a variable, 'NeedSend', of type 'bool', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateSink(OpenSource.UPnP.HTTPSession)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="489">Modify 'HTTPRequest.CreateSink(HTTPSession)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForceCloseSession()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="152">Modify 'HTTPRequest.ForceCloseSession()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetHostByNameSink(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="200">Modify 'HTTPRequest.GetHostByNameSink(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IdleTimeout" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPRequest.IdleTimeout' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LastMessage" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'HTTPRequest.LastMessage' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PIPELINE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPRequest.PIPELINE' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PipelineRequest(System.Net.IPEndPoint,OpenSource.UPnP.HTTPMessage,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MSG" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="165">In member 'HTTPRequest.PipelineRequest(IPEndPoint, HTTPMessage, object)', correct the casing of 'MSG' in parameter name 'MSG' by changing it to 'msg'.</Issue>
            </Message>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="165">In member 'HTTPRequest.PipelineRequest(IPEndPoint, HTTPMessage, object)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="165">In method 'HTTPRequest.PipelineRequest(IPEndPoint, HTTPMessage, object)', correct the spelling of 'dest' in parameter name 'dest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PipelineRequest(System.Uri,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Resource" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="175">In member 'HTTPRequest.PipelineRequest(Uri, object)', correct the casing of 'Resource' in parameter name 'Resource' by changing it to 'resource'.</Issue>
            </Message>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="175">In member 'HTTPRequest.PipelineRequest(Uri, object)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="178">In externally visible method 'HTTPRequest.PipelineRequest(Uri, object)', validate parameter 'Resource' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProxySetting" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPRequest.ProxySetting' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReceiveSink(OpenSource.UPnP.HTTPSession,OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="377">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPRequest.ReceiveSink(HTTPSession, HTTPMessage)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveIPv6Scope(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="219">The 'this' parameter (or 'Me' in Visual Basic) of 'HTTPRequest.RemoveIPv6Scope(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestAnsweredSink(OpenSource.UPnP.HTTPSession)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPRequest.cs" Line="451">Modify 'HTTPRequest.RequestAnsweredSink(HTTPSession)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnInactiveClosed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'HTTPRequest.InactiveClosedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'HTTPRequest.InactiveClosedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'HTTPRequest.InactiveClosedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnResponse" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'HTTPRequest.RequestHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'HTTPRequest.RequestHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'HTTPRequest.RequestHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'HTTPRequest.RequestHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniff" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'HTTPRequest.SniffHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'HTTPRequest.SniffHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'HTTPRequest.SniffHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'HTTPRequest.SniffHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniffPacket" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'HTTPRequest.RequestHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'HTTPRequest.RequestHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'HTTPRequest.RequestHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'HTTPRequest.RequestHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPRequest+HeaderHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Stream" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPRequest.HeaderHandler', correct the casing of 'Stream' in parameter name 'StreamObj' by changing it to 'stream'.</Issue>
          </Message>
          <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPRequest.HeaderHandler', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
          </Message>
          <Message Id="Web" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPRequest.HeaderHandler', correct the casing of 'Web' in parameter name 'WebSession' by changing it to 'web'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPRequest.HeaderHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPRequest+InactiveClosedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPRequest.InactiveClosedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPRequest+RequestHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Response" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPRequest.RequestHandler', correct the casing of 'Response' in parameter name 'Response' by changing it to 'response'.</Issue>
          </Message>
          <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPRequest.RequestHandler', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPRequest.RequestHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPRequest+SniffHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPRequest.SniffHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HttpRequestor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetRequestAsyncCallback(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="158">Modify 'HttpRequestor.GetRequestAsyncCallback(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResponseAsyncCallback(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="211">In method 'HttpRequestor.GetResponseAsyncCallback(IAsyncResult)', call System.IDisposable.Dispose on object 'mem' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="180">Modify 'HttpRequestor.GetResponseAsyncCallback(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="222">Modify 'HttpRequestor.GetResponseAsyncCallback(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LaunchProxyRequest(System.String,System.Byte[],System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PassSystemUriObjectsInsteadOfStrings" Category="Microsoft.Usage" CheckId="CA2234" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="57">Modify 'HttpRequestor.LaunchProxyRequest(string, byte[], object)' to call 'WebRequest.Create(Uri)' instead of 'WebRequest.Create(string)'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="57">Change the type of parameter 'url' of method 'HttpRequestor.LaunchProxyRequest(string, byte[], object)' from string to System.Uri, or provide an overload of 'HttpRequestor.LaunchProxyRequest(string, byte[], object)', that allows 'url' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LaunchRequest(System.String,System.Byte[],System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Net.NetworkCredential,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PassSystemUriObjectsInsteadOfStrings" Category="Microsoft.Usage" CheckId="CA2234" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="96">Modify 'HttpRequestor.LaunchRequest(string, byte[], X509CertificateCollection, NetworkCredential, object)' to call 'WebRequest.Create(Uri)' instead of 'WebRequest.Create(string)'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HttpRequestor.cs" Line="96">Change the type of parameter 'url' of method 'HttpRequestor.LaunchRequest(string, byte[], X509CertificateCollection, NetworkCredential, object)' from string to System.Uri, or provide an overload of 'HttpRequestor.LaunchRequest(string, byte[], X509CertificateCollection, NetworkCredential, object)', that allows 'url' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PendingRequests" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HttpRequestor.PendingRequests' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Retrys" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HttpRequestor.Retrys' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Retrys" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Retrys' in member name 'HttpRequestor.Retrys' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Timeout" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HttpRequestor.Timeout' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnRequestCompleted" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'HttpRequestor.RequestCompletedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'HttpRequestor.RequestCompletedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'HttpRequestor.RequestCompletedHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'HttpRequestor.RequestCompletedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HttpRequestor+RequestCompletedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HttpRequestor.RequestCompletedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Invoke(OpenSource.UPnP.HttpRequestor,System.Boolean,System.Object,System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="3#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error">Change the type of parameter 'url' of method 'HttpRequestor.RequestCompletedHandler.Invoke(HttpRequestor, bool, object, string, byte[])' from string to System.Uri, or provide an overload of 'HttpRequestor.RequestCompletedHandler.Invoke(HttpRequestor, bool, object, string, byte[])', that allows 'url' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HttpRequestor+RequestState" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#certificates" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'HttpRequestor.RequestState.certificates' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#retrycount" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'HttpRequestor.RequestState.retrycount' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPSession" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="HTTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'HTTP' in type name 'HTTPSession' by changing it to 'Http'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'HTTPSession' because it creates members of the following IDisposable types: 'MemoryStream'. If 'HTTPSession' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Net.IPEndPoint,System.Net.IPEndPoint,OpenSource.UPnP.HTTPSession+SessionHandler,OpenSource.UPnP.HTTPSession+SessionHandler,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Create" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="102">In member 'HTTPSession.HTTPSession(IPEndPoint, IPEndPoint, HTTPSession.SessionHandler, HTTPSession.SessionHandler, object)', correct the casing of 'Create' in parameter name 'CreateCallback' by changing it to 'create'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="102">In member 'HTTPSession.HTTPSession(IPEndPoint, IPEndPoint, HTTPSession.SessionHandler, HTTPSession.SessionHandler, object)', correct the casing of 'Create' in parameter name 'CreateFailedCallback' by changing it to 'create'.</Issue>
            </Message>
            <Message Id="Local" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="102">In member 'HTTPSession.HTTPSession(IPEndPoint, IPEndPoint, HTTPSession.SessionHandler, HTTPSession.SessionHandler, object)', correct the casing of 'Local' in parameter name 'Local' by changing it to 'local'.</Issue>
            </Message>
            <Message Id="Remote" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="102">In member 'HTTPSession.HTTPSession(IPEndPoint, IPEndPoint, HTTPSession.SessionHandler, HTTPSession.SessionHandler, object)', correct the casing of 'Remote' in parameter name 'Remote' by changing it to 'remote'.</Issue>
            </Message>
            <Message Id="State" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="102">In member 'HTTPSession.HTTPSession(IPEndPoint, IPEndPoint, HTTPSession.SessionHandler, HTTPSession.SessionHandler, object)', correct the casing of 'State' in parameter name 'State' by changing it to 'state'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Net.IPEndPoint,System.Net.Sockets.Socket)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Local" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="102">In member 'HTTPSession.HTTPSession(IPEndPoint, Socket)', correct the casing of 'Local' in parameter name 'Local' by changing it to 'local'.</Issue>
            </Message>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="102">In member 'HTTPSession.HTTPSession(IPEndPoint, Socket)', correct the casing of 'The' in parameter name 'TheSocket' by changing it to 'the'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="385">In externally visible method 'HTTPSession.HTTPSession(IPEndPoint, Socket)', validate parameter 'TheSocket' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Net.IPEndPoint,System.Net.Sockets.Socket,OpenSource.UPnP.HTTPSession+ReceiveHeaderHandler,OpenSource.UPnP.HTTPSession+ReceiveHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Header" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="405">In member 'HTTPSession.HTTPSession(IPEndPoint, Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', correct the casing of 'Header' in parameter name 'HeaderCallback' by changing it to 'header'.</Issue>
            </Message>
            <Message Id="Local" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="405">In member 'HTTPSession.HTTPSession(IPEndPoint, Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', correct the casing of 'Local' in parameter name 'Local' by changing it to 'local'.</Issue>
            </Message>
            <Message Id="Request" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="405">In member 'HTTPSession.HTTPSession(IPEndPoint, Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', correct the casing of 'Request' in parameter name 'RequestCallback' by changing it to 'request'.</Issue>
            </Message>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="405">In member 'HTTPSession.HTTPSession(IPEndPoint, Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', correct the casing of 'The' in parameter name 'TheSocket' by changing it to 'the'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Net.Sockets.Socket,OpenSource.UPnP.HTTPSession+ReceiveHeaderHandler,OpenSource.UPnP.HTTPSession+ReceiveHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Header" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="376">In member 'HTTPSession.HTTPSession(Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', correct the casing of 'Header' in parameter name 'HeaderCallback' by changing it to 'header'.</Issue>
            </Message>
            <Message Id="Request" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="376">In member 'HTTPSession.HTTPSession(Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', correct the casing of 'Request' in parameter name 'RequestCallback' by changing it to 'request'.</Issue>
            </Message>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="376">In member 'HTTPSession.HTTPSession(Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', correct the casing of 'The' in parameter name 'TheSocket' by changing it to 'the'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="376">In externally visible method 'HTTPSession.HTTPSession(Socket, HTTPSession.ReceiveHeaderHandler, HTTPSession.ReceiveHandler)', validate parameter 'TheSocket' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BeginHeader()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1310">'HTTPSession.BeginHeader()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CHUNK_ENABLED" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPSession.CHUNK_ENABLED' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Close()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1622">Modify 'HTTPSession.Close()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CloseStreamObject(System.IO.Stream)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="454">In externally visible method 'HTTPSession.CloseStreamObject(Stream)', validate parameter 'stream' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DATA_CHUNK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPSession.DATA_CHUNK' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FIN_CHUNK_CRLF" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPSession.FIN_CHUNK_CRLF' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FOOTER_DATA" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPSession.FOOTER_DATA' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleReceive(OpenSource.UPnP.AsyncSocket,System.Byte[],System.Int32,System.Int32,System.Int32,System.Net.IPEndPoint,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1048">'HTTPSession.HandleReceive(AsyncSocket, byte[], int, int, int, IPEndPoint, IPEndPoint)' has a cyclomatic complexity of 45. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1123">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.HandleReceive(AsyncSocket, byte[], int, int, int, IPEndPoint, IPEndPoint)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1137">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.HandleReceive(AsyncSocket, byte[], int, int, int, IPEndPoint, IPEndPoint)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1146">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.HandleReceive(AsyncSocket, byte[], int, int, int, IPEndPoint, IPEndPoint)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1143">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'HTTPSession.HandleReceive(AsyncSocket, byte[], int, int, int, IPEndPoint, IPEndPoint)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1121">Replace the call to 'string.operator ==(string, string)' in 'HTTPSession.HandleReceive(AsyncSocket, byte[], int, int, int, IPEndPoint, IPEndPoint)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Monitor" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Monitor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NO_CHUNK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPSession.NO_CHUNK' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseQueue()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="707">'obj', a variable, is cast to type 'HTTPMessage' multiple times in method 'HTTPSession.ParseQueue()'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostStreamObject(System.IO.Stream,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Content" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="485">In member 'HTTPSession.PostStreamObject(Stream, string, string)', correct the casing of 'Content' in parameter name 'ContentType' by changing it to 'content'.</Issue>
            </Message>
            <Message Id="Post" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="485">In member 'HTTPSession.PostStreamObject(Stream, string, string)', correct the casing of 'Post' in parameter name 'PostWhat' by changing it to 'post'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="485">In member 'HTTPSession.PostStreamObject(Stream, string, string)', correct the casing of 'S' in parameter name 'SObject' by changing it to 's'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="485">In method 'HTTPSession.PostStreamObject(Stream, string, string)', correct the spelling of 'S' in parameter name 'SObject' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="501">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.PostStreamObject(Stream, string, string)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="493">In externally visible method 'HTTPSession.PostStreamObject(Stream, string, string)', validate parameter 'SObject' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessChunk(System.Byte[],System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1324">'HTTPSession.ProcessChunk(byte[], int)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1368">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.ProcessChunk(byte[], int)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String,System.Globalization.NumberStyles)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1368">Because the behavior of 'int.Parse(string, NumberStyles)' could vary based on the current user's locale settings, replace this call in 'HTTPSession.ProcessChunk(byte[], int)' with a call to 'int.Parse(string, NumberStyles, IFormatProvider)'. If the result of 'int.Parse(string, NumberStyles, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1363">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPSession.ProcessChunk(byte[], int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1365">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPSession.ProcessChunk(byte[], int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1492">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPSession.ProcessChunk(byte[], int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1493">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'HTTPSession.ProcessChunk(byte[], int)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Send(OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Packet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1568">In member 'HTTPSession.Send(HTTPMessage)', correct the casing of 'Packet' in parameter name 'Packet' by changing it to 'packet'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1569">In externally visible method 'HTTPSession.Send(HTTPMessage)', validate parameter 'Packet' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendChunked(System.Byte[],System.Int32,System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="512">Because the behavior of 'int.ToString(string)' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SendChunked(byte[], int, int, object)' with a call to 'int.ToString(string, IFormatProvider)'. If the result of 'int.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendChunkedPacketBody(System.Byte[],System.Int32,System.Int32,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1555">In member 'HTTPSession.SendChunkedPacketBody(byte[], int, int, object)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendChunkedPacketHeaders(OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Header" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1541">In member 'HTTPSession.SendChunkedPacketHeaders(HTTPMessage)', correct the casing of 'Header' in parameter name 'Header' by changing it to 'header'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1546">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SendChunkedPacketHeaders(HTTPMessage)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1542">In externally visible method 'HTTPSession.SendChunkedPacketHeaders(HTTPMessage)', validate parameter 'Header' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEndChunkPacket(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1559">In member 'HTTPSession.SendEndChunkPacket(object)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendStreamObject(System.IO.Stream,OpenSource.UPnP.HTTPSession+Range[],System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="760">Modify 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Content" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="727">In member 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)', correct the casing of 'Content' in parameter name 'ContentType' by changing it to 'content'.</Issue>
            </Message>
            <Message Id="Ranges" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="727">In member 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)', correct the casing of 'Ranges' in parameter name 'Ranges' by changing it to 'ranges'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="727">In member 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)', correct the casing of 'S' in parameter name 'SObject' by changing it to 's'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="727">In method 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)', correct the spelling of 'S' in parameter name 'SObject' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="772">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="772">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="772">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="772">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="758">In externally visible method 'HTTPSession.SendStreamObject(Stream, HTTPSession.Range[], string)', validate parameter 'SObject' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendStreamObject(System.IO.Stream,System.Int64,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Content" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="813">In member 'HTTPSession.SendStreamObject(Stream, long, string)', correct the casing of 'Content' in parameter name 'ContentType' by changing it to 'content'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="813">In member 'HTTPSession.SendStreamObject(Stream, long, string)', correct the casing of 'S' in parameter name 'SObject' by changing it to 's'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="813">In method 'HTTPSession.SendStreamObject(Stream, long, string)', correct the spelling of 'S' in parameter name 'SObject' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="829">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SendStreamObject(Stream, long, string)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendStreamObject(System.IO.Stream,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Content" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="866">In member 'HTTPSession.SendStreamObject(Stream, string)', correct the casing of 'Content' in parameter name 'ContentType' by changing it to 'content'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="866">In member 'HTTPSession.SendStreamObject(Stream, string)', correct the casing of 'S' in parameter name 'SObject' by changing it to 's'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="866">In method 'HTTPSession.SendStreamObject(Stream, string)', correct the spelling of 'S' in parameter name 'SObject' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SessionID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="434">Correct the casing of 'ID' in member name 'HTTPSession.SessionID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SET_REQUEST_ANSWERED()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="1039">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.SET_REQUEST_ANSWERED()' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#START_CHUNK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPSession.START_CHUNK' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#START_FOOTER_CHUNK" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'HTTPSession.START_FOOTER_CHUNK' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StateObject" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.StateObject' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StreamSendCallback(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="550">Modify 'HTTPSession.StreamSendCallback(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="624">Modify 'HTTPSession.StreamSendCallback(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="591">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.StreamSendCallback(IAsyncResult)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="591">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.StreamSendCallback(IAsyncResult)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="591">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'HTTPSession.StreamSendCallback(IAsyncResult)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UserStream" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.UserStream' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnClosed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="283">Declare the first parameter of 'HTTPSession.SessionHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="283">Declare the second parameter of 'HTTPSession.SessionHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="283">Rename 'HTTPSession.SessionHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnCreateFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="267">Declare the first parameter of 'HTTPSession.SessionHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="267">Declare the second parameter of 'HTTPSession.SessionHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="267">Rename 'HTTPSession.SessionHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnCreateSession" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="251">Declare the first parameter of 'HTTPSession.SessionHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="251">Declare the second parameter of 'HTTPSession.SessionHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="251">Rename 'HTTPSession.SessionHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnHeader" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="203">Declare the first parameter of 'HTTPSession.ReceiveHeaderHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="203">Declare the second parameter of 'HTTPSession.ReceiveHeaderHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="203">Remove all but the first two parameters of 'HTTPSession.ReceiveHeaderHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="203">Rename 'HTTPSession.ReceiveHeaderHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnReceive" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="170">Declare the first parameter of 'HTTPSession.ReceiveHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="170">Declare the second parameter of 'HTTPSession.ReceiveHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="170">Rename 'HTTPSession.ReceiveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnRequestAnswered" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="219">Declare the first parameter of 'HTTPSession.SessionHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="219">Declare the second parameter of 'HTTPSession.SessionHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="219">Rename 'HTTPSession.SessionHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSendReady" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="299">Declare the first parameter of 'AsyncSocket.OnSendReadyHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="299">Declare the second parameter of 'AsyncSocket.OnSendReadyHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="299">Rename 'AsyncSocket.OnSendReadyHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniffPacket" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="186">Declare the first parameter of 'HTTPSession.ReceiveHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="186">Declare the second parameter of 'HTTPSession.ReceiveHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="186">Rename 'HTTPSession.ReceiveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnStreamDone" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="235">Declare the first parameter of 'HTTPSession.StreamDoneHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="235">Declare the second parameter of 'HTTPSession.StreamDoneHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSession.cs" Line="235">Rename 'HTTPSession.StreamDoneHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPSession+ActivityMonitor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSession.ActivityMonitor'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPSession+Info" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSession.Info'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'HTTPSession.Info' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'HTTPSession.Info' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CurrentStreamObject" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Info.CurrentStreamObject' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RangeContentType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Info.RangeContentType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RangeIndex" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Info.RangeIndex' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RangeList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Info.RangeList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RangeSeparator" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Info.RangeSeparator' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StringPacket" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Info.StringPacket' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPSession+Range" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSession.Range'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'HTTPSession.Range' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'HTTPSession.Range' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Length" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Range.Length' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Position" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Range.Position' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RangeLeft" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'HTTPSession.Range.RangeLeft' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPSession+ReceiveHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'HTTPSession.ReceiveHandler', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSession.ReceiveHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPSession+ReceiveHeaderHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Headers" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPSession.ReceiveHeaderHandler', correct the casing of 'Headers' in parameter name 'Headers' by changing it to 'headers'.</Issue>
          </Message>
          <Message Id="Stream" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPSession.ReceiveHeaderHandler', correct the casing of 'Stream' in parameter name 'StreamObj' by changing it to 'stream'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSession.ReceiveHeaderHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPSession+SessionHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPSession.SessionHandler', correct the casing of 'The' in parameter name 'TheSession' by changing it to 'the'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSession.SessionHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPSession+StreamDoneHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Stream" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'HTTPSession.StreamDoneHandler', correct the casing of 'Stream' in parameter name 'StreamObject' by changing it to 'stream'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSession.StreamDoneHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="HTTPSessionWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="HTTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'HTTP' in type name 'HTTPSessionWatcher' by changing it to 'Http'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OpenSource.UPnP.HTTPSession)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSessionWatcher.cs" Line="30">In method 'HTTPSessionWatcher.HTTPSessionWatcher(HTTPSession)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="HTTPSessionWatcher.cs" Line="33">In externally visible method 'HTTPSessionWatcher.HTTPSessionWatcher(HTTPSession)', validate parameter 's' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#W" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'HTTPSessionWatcher.W' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniff" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'HTTPSessionWatcher.SniffHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'HTTPSessionWatcher.SniffHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'HTTPSessionWatcher.SniffHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'HTTPSessionWatcher.SniffHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HTTPSessionWatcher+SniffHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'HTTPSessionWatcher.SniffHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InvalidRelatedStateVariableException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidRelatedStateVariableException': protected InvalidRelatedStateVariableException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidRelatedStateVariableException': public InvalidRelatedStateVariableException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'InvalidRelatedStateVariableException': public InvalidRelatedStateVariableException(String, Exception).</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="80">In method 'InvalidRelatedStateVariableException.InvalidRelatedStateVariableException(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IUPnPDevice" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'IUPnPDevice' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'IUPnPDevice'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetUPnPDevice()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Pn' in member name 'IUPnPDevice.GetUPnPDevice()' by changing it to 'PN'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in member name 'IUPnPDevice.GetUPnPDevice()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IUPnPDevice.GetUPnPDevice()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IUPnPService" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'IUPnPService' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'IUPnPService'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetUPnPService()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Pn' in member name 'IUPnPService.GetUPnPService()' by changing it to 'PN'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in member name 'IUPnPService.GetUPnPService()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IUPnPService.GetUPnPService()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LifeTimeMonitor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="LifeTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'LifeTime' in type name 'LifeTimeMonitor' exists as a discrete term. If your usage is intended to be single word, case it as 'Lifetime'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Add(System.Object,System.Double)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="LifeTimeMonitor.cs" Line="159">In member 'LifeTimeMonitor.Add(object, double)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Add(System.Object,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="LifeTimeMonitor.cs" Line="146">In member 'LifeTimeMonitor.Add(object, int)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="LifeTimeMonitor.cs" Line="113">In member 'LifeTimeMonitor.Remove(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnExpired" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="LifeTimeMonitor.cs" Line="44">Declare the first parameter of 'LifeTimeMonitor.LifeTimeHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="LifeTimeMonitor.cs" Line="44">Declare the second parameter of 'LifeTimeMonitor.LifeTimeHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="LifeTimeMonitor.cs" Line="44">Rename 'LifeTimeMonitor.LifeTimeHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LifeTimeMonitor+LifeTimeHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="LifeTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'LifeTime' in type name 'LifeTimeMonitor.LifeTimeHandler' exists as a discrete term. If your usage is intended to be single word, case it as 'Lifetime'.</Issue>
          </Message>
          <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="LanguageIndependentDelegateParameter" Certainty="75" Level="Error">In delegate 'LifeTimeMonitor.LifeTimeHandler', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'LifeTimeMonitor.LifeTimeHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LockRMWO" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="RMWO" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'RMWO' in type name 'LockRMWO' by changing it to 'Rmwo'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MiniWebServer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WebServer" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'WebServer' in type name 'MiniWebServer' exists as a discrete term. If your usage is intended to be single word, case it as 'Webserver'.</Issue>
          </Message>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'MiniWebServer' because it creates members of the following IDisposable types: 'Socket'. If 'MiniWebServer' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="95">In externally visible method 'MiniWebServer.MiniWebServer(IPEndPoint)', validate parameter 'local' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Accept(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="181">Modify 'MiniWebServer.Accept(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="194">Modify 'MiniWebServer.Accept(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IdleTimeout" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'MiniWebServer.IdleTimeout' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnHeader" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="79">Declare the first parameter of 'MiniWebServer.HTTPReceiveHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="79">Declare the second parameter of 'MiniWebServer.HTTPReceiveHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="79">Rename 'MiniWebServer.HTTPReceiveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnReceive" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="69">Declare the first parameter of 'MiniWebServer.HTTPReceiveHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="69">Declare the second parameter of 'MiniWebServer.HTTPReceiveHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="69">Rename 'MiniWebServer.HTTPReceiveHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSession" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="57">Declare the first parameter of 'MiniWebServer.NewSessionHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="57">Declare the second parameter of 'MiniWebServer.NewSessionHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="57">Rename 'MiniWebServer.NewSessionHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MiniWebServer+HTTPReceiveHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="HTTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'HTTP' in type name 'MiniWebServer.HTTPReceiveHandler' by changing it to 'Http'.</Issue>
          </Message>
          <Message Id="Web" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'MiniWebServer.HTTPReceiveHandler', correct the casing of 'Web' in parameter name 'WebSession' by changing it to 'web'.</Issue>
          </Message>
          <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'MiniWebServer.HTTPReceiveHandler', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'MiniWebServer.HTTPReceiveHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MiniWebServer+NewSessionHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'MiniWebServer.NewSessionHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MiniWebServerException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="WebServer" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="TypeShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'WebServer' in type name 'MiniWebServerException' exists as a discrete term. If your usage is intended to be single word, case it as 'Webserver'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'MiniWebServerException': protected MiniWebServerException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'MiniWebServerException': public MiniWebServerException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'MiniWebServerException': public MiniWebServerException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'MiniWebServerException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="MiniWebServer.cs" Line="34">In method 'MiniWebServerException.MiniWebServerException(string)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetworkInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetFreePort(System.Int32,System.Int32,System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="FreePort" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="201">The compound word 'FreePort' in member name 'NetworkInfo.GetFreePort(int, int, IPAddress)' exists as a discrete term. If your usage is intended to be single word, case it as 'Freeport' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="205">In method 'NetworkInfo.GetFreePort(int, int, IPAddress)', object 'TestSocket' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'TestSocket' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="217">Modify 'NetworkInfo.GetFreePort(int, int, IPAddress)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Low" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="201">In member 'NetworkInfo.GetFreePort(int, int, IPAddress)', correct the casing of 'Low' in parameter name 'LowRange' by changing it to 'low'.</Issue>
            </Message>
            <Message Id="On" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="201">In member 'NetworkInfo.GetFreePort(int, int, IPAddress)', correct the casing of 'On' in parameter name 'OnThisIP' by changing it to 'on'.</Issue>
            </Message>
            <Message Id="Upper" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="201">In member 'NetworkInfo.GetFreePort(int, int, IPAddress)', correct the casing of 'Upper' in parameter name 'UpperRange' by changing it to 'upper'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NetworkPollSeconds" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'NetworkInfo.NetworkPollSeconds' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PollInterface(OpenSource.UPnP.LifeTimeMonitor,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="183">Modify 'NetworkInfo.PollInterface(LifeTimeMonitor, object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnInterfaceDisabled" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="62">Declare the first parameter of 'NetworkInfo.InterfaceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="62">Declare the second parameter of 'NetworkInfo.InterfaceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="62">Rename 'NetworkInfo.InterfaceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnNewInterface" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="47">Declare the first parameter of 'NetworkInfo.InterfaceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="47">Declare the second parameter of 'NetworkInfo.InterfaceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="NetworkInfo.cs" Line="47">Rename 'NetworkInfo.InterfaceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetworkInfo+InterfaceHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'NetworkInfo.InterfaceHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ProtocolTypes" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'ProtocolTypes' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#HTTP" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HTTP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HTTP' in member name 'ProtocolTypes.HTTP' by changing it to 'Http'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MMS" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MMS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MMS' in member name 'ProtocolTypes.MMS' by changing it to 'Mms'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReadOnlyObjectCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="90" Level="Error">'ReadOnlyObjectCollection' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of ICollection&lt;T&gt; where T is the underlying element type of 'ReadOnlyObjectCollection'.</Issue>
          </Message>
          <Message TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">'ReadOnlyObjectCollection' should provide a strongly typed implementation of ICollection.CopyTo.</Issue>
          </Message>
          <Message TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="System.Collections.ReadOnlyCollectionBase" Certainty="75" Level="Error">Change the base type of 'ReadOnlyObjectCollection' from 'ReadOnlyCollectionBase' to its generic equivalent 'System.Collections.ObjectModel.ReadOnlyCollection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Item(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Index" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="__ReadOnlyCollections.cs" Line="39">In member 'ReadOnlyObjectCollection.Item(int)', correct the casing of 'Index' in parameter name 'Index' by changing it to 'index'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReturnArgumentAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'ReturnArgumentAttribute', if possible.</Issue>
          </Message>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'val' of Attribute 'ReturnArgumentAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="52">In method 'ReturnArgumentAttribute.ReturnArgumentAttribute(string)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SafeTimer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'SafeTimer' because it creates members of the following IDisposable types: 'ManualResetEvent'. If 'SafeTimer' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Auto" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="65">In member 'SafeTimer.SafeTimer(int, bool)', correct the casing of 'Auto' in parameter name 'Auto' by changing it to 'auto'.</Issue>
            </Message>
            <Message Id="Milliseconds" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="65">In member 'SafeTimer.SafeTimer(int, bool)', correct the casing of 'Milliseconds' in parameter name 'Milliseconds' by changing it to 'milliseconds'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AutoReset" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SafeTimer.AutoReset' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dispose" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="101">Correct the casing of 'dispose' in member name 'SafeTimer.dispose()' by changing it to 'Dispose'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="105">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SafeTimer.dispose()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleTimer(System.Object,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="166">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SafeTimer.HandleTimer(object, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="188">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SafeTimer.HandleTimer(object, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="219">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'SafeTimer.HandleTimer(object, bool)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Interval" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SafeTimer.Interval' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Stop()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="IsOK" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="154">'SafeTimer.Stop()' declares a variable, 'IsOK', of type 'bool', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnElapsed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="40">Declare the first parameter of 'SafeTimer.TimeElapsedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="40">Declare the second parameter of 'SafeTimer.TimeElapsedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SafeTimer.cs" Line="40">Rename 'SafeTimer.TimeElapsedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SafeTimer+TimeElapsedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SafeTimer.TimeElapsedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SCPDException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="SCPD" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'SCPD' in type name 'SCPDException' by changing it to 'Scpd'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SCPDException': protected SCPDException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SCPDException': public SCPDException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SCPDException': public SCPDException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'SCPDException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="73">In method 'SCPDException.SCPDException(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SSDP" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="SSDP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'SSDP' in type name 'SSDP' by changing it to 'Ssdp'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Expiration" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="50">In member 'SSDP.SSDP(int)', correct the casing of 'Expiration' in parameter name 'Expiration' by changing it to 'expiration'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BroadcastData(OpenSource.UPnP.HTTPMessage,System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="netinterface" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="364">In method 'SSDP.BroadcastData(HTTPMessage, IPAddress)', correct the spelling of 'netinterface' in parameter name 'netinterface' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="367">In externally visible method 'SSDP.BroadcastData(HTTPMessage, IPAddress)', validate parameter 'packet' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="368">In externally visible method 'SSDP.BroadcastData(HTTPMessage, IPAddress)', validate parameter 'netinterface' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnReceiveSink(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="240">Modify 'SSDP.OnReceiveSink(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="246">Modify 'SSDP.OnReceiveSink(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseURL(System.String,System.String&amp;,System.Int32&amp;,System.String&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">Consider a design that does not require that 'WebIP' be an out parameter.</Issue>
            </Message>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">Consider a design that does not require that 'Port' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">Consider a design that does not require that 'ServiceName' be an out parameter.</Issue>
            </Message>
            <Message Id="Port" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">In member 'SSDP.ParseURL(string, out string, out int, out string)', correct the casing of 'Port' in parameter name 'Port' by changing it to 'port'.</Issue>
            </Message>
            <Message Id="Service" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">In member 'SSDP.ParseURL(string, out string, out int, out string)', correct the casing of 'Service' in parameter name 'ServiceName' by changing it to 'service'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">In member 'SSDP.ParseURL(string, out string, out int, out string)', correct the casing of 'Service' in parameter name 'ServiceURL' by changing it to 'service'.</Issue>
            </Message>
            <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">Correct the casing of 'URL' in member name 'SSDP.ParseURL(string, out string, out int, out string)' by changing it to 'Url'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">In member 'SSDP.ParseURL(string, out string, out int, out string)', correct the casing of 'URL' in parameter name 'ServiceURL' by changing it to 'Url'.</Issue>
            </Message>
            <Message Id="Web" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">In member 'SSDP.ParseURL(string, out string, out int, out string)', correct the casing of 'Web' in parameter name 'WebIP' by changing it to 'web'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="269">Change the type of parameter 'ServiceURL' of method 'SSDP.ParseURL(string, out string, out int, out string)' from string to System.Uri, or provide an overload of 'SSDP.ParseURL(string, out string, out int, out string)', that allows 'ServiceURL' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessPacket(OpenSource.UPnP.HTTPMessage,System.Net.IPEndPoint,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="324">Modify 'SSDP.ProcessPacket(HTTPMessage, IPEndPoint, IPEndPoint)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="293">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'SSDP.ProcessPacket(HTTPMessage, IPEndPoint, IPEndPoint)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="305">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'SSDP.ProcessPacket(HTTPMessage, IPEndPoint, IPEndPoint)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="307">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SSDP.ProcessPacket(HTTPMessage, IPEndPoint, IPEndPoint)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="334">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'SSDP.ProcessPacket(HTTPMessage, IPEndPoint, IPEndPoint)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="289">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'SSDP.ProcessPacket(HTTPMessage, IPEndPoint, IPEndPoint)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="298">Replace the call to 'string.operator !=(string, string)' in 'SSDP.ProcessPacket(HTTPMessage, IPEndPoint, IPEndPoint)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetupSessions()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="142">In method 'SSDP.SetupSessions()', call System.IDisposable.Dispose on object 'session' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="177">In method 'SSDP.SetupSessions()', call System.IDisposable.Dispose on object 'session' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="164">In method 'SSDP.SetupSessions()', call System.IDisposable.Dispose on object 'usession' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="199">In method 'SSDP.SetupSessions()', call System.IDisposable.Dispose on object 'usession' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SSDP_EXPIRATION" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SSDP.SSDP_EXPIRATION' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnicastData(OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="410">In method 'SSDP.UnicastData(HTTPMessage)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="411">In externally visible method 'SSDP.UnicastData(HTTPMessage)', validate parameter 'msg' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateSearchPacket(OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="350">The 'this' parameter (or 'Me' in Visual Basic) of 'SSDP.ValidateSearchPacket(HTTPMessage)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnNotify" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'SSDP.NotifyHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SSDP.NotifyHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'SSDP.NotifyHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'SSDP.NotifyHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnRefresh" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'SSDP.RefreshHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SSDP.RefreshHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'SSDP.RefreshHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSearch" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'SSDP.SearchHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SSDP.SearchHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'SSDP.SearchHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'SSDP.SearchHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniffPacket" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'SSDP.SnifferHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SSDP.SnifferHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'SSDP.SnifferHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'SSDP.SnifferHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SSDP+InvalidSearchPacketException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SSDP.InvalidSearchPacketException': protected InvalidSearchPacketException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SSDP.InvalidSearchPacketException': public InvalidSearchPacketException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'SSDP.InvalidSearchPacketException': public InvalidSearchPacketException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'SSDP.InvalidSearchPacketException' as this type implements ISerializable.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SSDP.InvalidSearchPacketException'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="SSDP.cs" Line="40">In method 'SSDP.InvalidSearchPacketException.InvalidSearchPacketException(string)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SSDP+NotifyHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Is" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.NotifyHandler', correct the casing of 'Is' in parameter name 'IsAlive' by changing it to 'is'.</Issue>
          </Message>
          <Message Id="Location" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.NotifyHandler', correct the casing of 'Location' in parameter name 'LocationURL' by changing it to 'location'.</Issue>
          </Message>
          <Message Id="Max" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.NotifyHandler', correct the casing of 'Max' in parameter name 'MaxAge' by changing it to 'max'.</Issue>
          </Message>
          <Message Id="Packet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.NotifyHandler', correct the casing of 'Packet' in parameter name 'Packet' by changing it to 'packet'.</Issue>
          </Message>
          <Message Id="ST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.NotifyHandler', correct the casing of 'ST' in parameter name 'ST' by changing it to 'st'.</Issue>
          </Message>
          <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.NotifyHandler', correct the casing of 'URL' in parameter name 'LocationURL' by changing it to 'Url'.</Issue>
          </Message>
          <Message Id="USN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.NotifyHandler', correct the casing of 'USN' in parameter name 'USN' by changing it to 'usn'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SSDP.NotifyHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SSDP+PacketHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Packet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.PacketHandler', correct the casing of 'Packet' in parameter name 'Packet' by changing it to 'packet'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SSDP.PacketHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SSDP+RefreshHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SSDP.RefreshHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SSDP+SearchHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Search" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.SearchHandler', correct the casing of 'Search' in parameter name 'SearchTarget' by changing it to 'search'.</Issue>
          </Message>
          <Message Id="src" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'SSDP.SearchHandler', correct the spelling of 'src' in parameter name 'src' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SSDP.SearchHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SSDP+SnifferHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Packet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'SSDP.SnifferHandler', correct the casing of 'Packet' in parameter name 'Packet' by changing it to 'packet'.</Issue>
          </Message>
          <Message Id="dest" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'SSDP.SnifferHandler', correct the spelling of 'dest' in parameter name 'dest' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'SSDP.SnifferHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="SyncInvokeAdapter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'SyncInvokeAdapter' because it creates members of the following IDisposable types: 'ManualResetEvent'. If 'SyncInvokeAdapter' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Arguments" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SyncInvokeAdapter.Arguments' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeErrorHandler" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SyncInvokeAdapter.InvokeErrorHandler' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeException" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SyncInvokeAdapter.InvokeException' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeHandler" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SyncInvokeAdapter.InvokeHandler' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Result" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SyncInvokeAdapter.Result' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReturnValue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'SyncInvokeAdapter.ReturnValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPAction" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPAction' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPAction'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ArgList" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPAction.ArgList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgumentList" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1212">Change 'UPnPAction.ArgumentList' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Arguments" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1225">Change 'UPnPAction.Arguments' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_Arguments(System.Collections.IList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1227">In externally visible method 'UPnPAction.Arguments.set(IList)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetArg(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Arg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1188">In member 'UPnPAction.GetArg(string)', correct the casing of 'Arg' in parameter name 'ArgName' by changing it to 'arg'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRetArg()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1166">Change 'UPnPAction.GetRetArg()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPAction.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentService" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPAction.ParentService' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SpecialCase" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPAction.SpecialCase' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ValidateArgs(OpenSource.UPnP.UPnPArgument[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Args" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1096">In member 'UPnPAction.ValidateArgs(UPnPArgument[])', correct the casing of 'Args' in parameter name 'Args' by changing it to 'args'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1104">In externally visible method 'UPnPAction.ValidateArgs(UPnPArgument[])', validate parameter 'Args' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPAction+SpecialInvokeCase" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="In" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPAction.SpecialInvokeCase', correct the casing of 'In' in parameter name 'InArgs' by changing it to 'in'.</Issue>
          </Message>
          <Message Id="Out" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPAction.SpecialInvokeCase', correct the casing of 'Out' in parameter name 'OutArgs' by changing it to 'out'.</Issue>
          </Message>
          <Message Id="Ret" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPAction.SpecialInvokeCase', correct the casing of 'Ret' in parameter name 'RetVal' by changing it to 'ret'.</Issue>
          </Message>
          <Message Id="Val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'UPnPAction.SpecialInvokeCase', correct the spelling of 'Val' in parameter name 'RetVal' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPAction.SpecialInvokeCase'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Invoke(OpenSource.UPnP.UPnPAction,OpenSource.UPnP.UPnPArgument[],System.Object&amp;,OpenSource.UPnP.UPnPArgument[]&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'RetVal' be an out parameter.</Issue>
            </Message>
            <Message Id="3#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Consider a design that does not require that 'OutArgs' be an out parameter.</Issue>
            </Message>
            <Message TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider using generics instead of a reference to System.Object in 'UPnPAction.SpecialInvokeCase.Invoke(UPnPAction, UPnPArgument[], out object, out UPnPArgument[])'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPAlreadySubscribedException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPAlreadySubscribedException' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPAlreadySubscribedException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPAlreadySubscribedException': protected UPnPAlreadySubscribedException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPAlreadySubscribedException': public UPnPAlreadySubscribedException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPAlreadySubscribedException': public UPnPAlreadySubscribedException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UPnPAlreadySubscribedException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="117">In method 'UPnPAlreadySubscribedException.UPnPAlreadySubscribedException(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPArgument" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPArgument' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPArgument'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="945">In method 'UPnPArgument.UPnPArgument(string, object)', correct the spelling of 'val' in parameter name 'val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DataType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPArgument.DataType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DataValue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPArgument.DataValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Direction" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPArgument.Direction' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsReturnValue" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPArgument.IsReturnValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPArgument.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPComplexType' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPComplexType'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Name" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="267">In member 'UPnPComplexType.UPnPComplexType(string, string)', correct the casing of 'Name' in parameter name 'Name' by changing it to 'name'.</Issue>
            </Message>
            <Message Id="Namespace" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="267">In member 'UPnPComplexType.UPnPComplexType(string, string)', correct the casing of 'Namespace' in parameter name 'Namespace' by changing it to 'namespace'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddContainer(OpenSource.UPnP.UPnPComplexType+GenericContainer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="227">In method 'UPnPComplexType.AddContainer(UPnPComplexType.GenericContainer)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="229">In externally visible method 'UPnPComplexType.AddContainer(UPnPComplexType.GenericContainer)', validate parameter 'c' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Containers" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="239">Change 'UPnPComplexType.Containers' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetComplexTypeSchemaPart(System.Xml.XmlTextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="337">In member 'UPnPComplexType.GetComplexTypeSchemaPart(XmlTextWriter)', correct the casing of 'X' in parameter name 'X' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="337">In method 'UPnPComplexType.GetComplexTypeSchemaPart(XmlTextWriter)', consider providing a more meaningful name than parameter name 'X'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="338">In externally visible method 'UPnPComplexType.GetComplexTypeSchemaPart(XmlTextWriter)', validate parameter 'X' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetComplexTypeSchemaPart3(System.Xml.XmlTextWriter,OpenSource.UPnP.UPnPComplexType+ItemCollection)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="294">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPComplexType.GetComplexTypeSchemaPart3(XmlTextWriter, UPnPComplexType.ItemCollection)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="297">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPComplexType.GetComplexTypeSchemaPart3(XmlTextWriter, UPnPComplexType.ItemCollection)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="301">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPComplexType.GetComplexTypeSchemaPart3(XmlTextWriter, UPnPComplexType.ItemCollection)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="312">Replace the call to 'string.operator !=(string, string)' in 'UPnPComplexType.GetComplexTypeSchemaPart3(XmlTextWriter, UPnPComplexType.ItemCollection)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="316">Replace the call to 'string.operator !=(string, string)' in 'UPnPComplexType.GetComplexTypeSchemaPart3(XmlTextWriter, UPnPComplexType.ItemCollection)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFields()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="215">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPComplexType.GetFields()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name_LOCAL" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LOCAL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="280">Correct the casing of 'LOCAL' in member name 'UPnPComplexType.Name_LOCAL' by changing it to 'Local'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="280">Remove the underscores from member name 'UPnPComplexType.Name_LOCAL'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name_NAMESPACE" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="NAMESPACE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="287">Correct the casing of 'NAMESPACE' in member name 'UPnPComplexType.Name_NAMESPACE' by changing it to 'Namespace'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="287">Remove the underscores from member name 'UPnPComplexType.Name_NAMESPACE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentService" Kind="Field" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UPnPComplexType.ParentService' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="361">In method 'UPnPComplexType.Parse(string)', call System.IDisposable.Dispose on object 's' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseCollection(System.Xml.XmlTextReader)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="352">In member 'UPnPComplexType.ParseCollection(XmlTextReader)', correct the casing of 'X' in parameter name 'X' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="352">In method 'UPnPComplexType.ParseCollection(XmlTextReader)', consider providing a more meaningful name than parameter name 'X'.</Issue>
            </Message>
            <Message Id="X" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="352">Parameter 'X' of 'UPnPComplexType.ParseCollection(XmlTextReader)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseComplexType(System.Xml.XmlTextReader,OpenSource.UPnP.UPnPComplexType)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="514">'UPnPComplexType.ParseComplexType(XmlTextReader, UPnPComplexType)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseComplexType_SequenceChoice(System.Xml.XmlTextReader)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="392">'UPnPComplexType.ParseComplexType_SequenceChoice(XmlTextReader)' has a cyclomatic complexity of 32. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message Id="sample" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="444">'UPnPComplexType.ParseComplexType_SequenceChoice(XmlTextReader)' declares a variable, 'sample', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveContainer(OpenSource.UPnP.UPnPComplexType+GenericContainer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="232">In method 'UPnPComplexType.RemoveContainer(UPnPComplexType.GenericContainer)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="234">In externally visible method 'UPnPComplexType.RemoveContainer(UPnPComplexType.GenericContainer)', validate parameter 'c' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+Attribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'UPnPComplexType.Attribute' so that it does not end in 'Attribute'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Attribute'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPComplexType+Choice" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Choice'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPComplexType+ComplexContent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.ComplexContent'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#RestExt" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ComplexContent.RestExt' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+ContentData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.ContentData'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#MaxOccurs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ContentData.MaxOccurs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MinOccurs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ContentData.MinOccurs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ContentData.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parent" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ContentData.Parent' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ContentData.Type' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TypeNS" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ContentData.TypeNS' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+Element" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Element'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AttributeList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Element.AttributeList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Attributes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="84">Change 'UPnPComplexType.Element.Attributes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+Extension" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Extension'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPComplexType+Field" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Field'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'UPnPComplexType.Field' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'UPnPComplexType.Field' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AttributeList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Field.AttributeList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxOccurs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Field.MaxOccurs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MinOccurs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Field.MinOccurs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Name" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Field.Name' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Field.Type' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TypeNS" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Field.TypeNS' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+GenericContainer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.GenericContainer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddCollection(OpenSource.UPnP.UPnPComplexType+ItemCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="190">In method 'UPnPComplexType.GenericContainer.AddCollection(UPnPComplexType.ItemCollection)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="192">In externally visible method 'UPnPComplexType.GenericContainer.AddCollection(UPnPComplexType.ItemCollection)', validate parameter 'e' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CollectionList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.GenericContainer.CollectionList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Collections" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="185">Change 'UPnPComplexType.GenericContainer.Collections' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#documentation" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.GenericContainer.documentation' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentComplexType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.GenericContainer.ParentComplexType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveCollection(OpenSource.UPnP.UPnPComplexType+ItemCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="195">In method 'UPnPComplexType.GenericContainer.RemoveCollection(UPnPComplexType.ItemCollection)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="197">In externally visible method 'UPnPComplexType.GenericContainer.RemoveCollection(UPnPComplexType.ItemCollection)', validate parameter 'e' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+Group" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Group'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPComplexType+ItemCollection" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="TypeNoAlternate" Certainty="95" Level="CriticalError">Rename type name 'UPnPComplexType.ItemCollection' so that it does not end in 'Collection'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.ItemCollection'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddCollection(OpenSource.UPnP.UPnPComplexType+ItemCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ic" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="108">In method 'UPnPComplexType.ItemCollection.AddCollection(UPnPComplexType.ItemCollection)', correct the spelling of 'ic' in parameter name 'ic' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="110">In externally visible method 'UPnPComplexType.ItemCollection.AddCollection(UPnPComplexType.ItemCollection)', validate parameter 'ic' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddContentItem(OpenSource.UPnP.UPnPComplexType+ContentData)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="140">In method 'UPnPComplexType.ItemCollection.AddContentItem(UPnPComplexType.ContentData)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="141">In externally visible method 'UPnPComplexType.ItemCollection.AddContentItem(UPnPComplexType.ContentData)', validate parameter 'c' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ItemList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ItemCollection.ItemList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Items" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="121">Change 'UPnPComplexType.ItemCollection.Items' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxOccurs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ItemCollection.MaxOccurs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MinOccurs" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ItemCollection.MinOccurs' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveContentItem_DOWN(OpenSource.UPnP.UPnPComplexType+ContentData)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DOWN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="158">Correct the casing of 'DOWN' in member name 'UPnPComplexType.ItemCollection.MoveContentItem_DOWN(UPnPComplexType.ContentData)' by changing it to 'Down'.</Issue>
            </Message>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="158">In method 'UPnPComplexType.ItemCollection.MoveContentItem_DOWN(UPnPComplexType.ContentData)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="158">Remove the underscores from member name 'UPnPComplexType.ItemCollection.MoveContentItem_DOWN(UPnPComplexType.ContentData)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MoveContentItem_UP(OpenSource.UPnP.UPnPComplexType+ContentData)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="150">In method 'UPnPComplexType.ItemCollection.MoveContentItem_UP(UPnPComplexType.ContentData)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="150">Remove the underscores from member name 'UPnPComplexType.ItemCollection.MoveContentItem_UP(UPnPComplexType.ContentData)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NestedCollectionList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ItemCollection.NestedCollectionList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NestedCollections" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="103">Change 'UPnPComplexType.ItemCollection.NestedCollections' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentCollection" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ItemCollection.ParentCollection' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentContainer" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.ItemCollection.ParentContainer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveCollection(OpenSource.UPnP.UPnPComplexType+ItemCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ic" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="113">In method 'UPnPComplexType.ItemCollection.RemoveCollection(UPnPComplexType.ItemCollection)', correct the spelling of 'ic' in parameter name 'ic' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="115">In externally visible method 'UPnPComplexType.ItemCollection.RemoveCollection(UPnPComplexType.ItemCollection)', validate parameter 'ic' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveContentItem(OpenSource.UPnP.UPnPComplexType+ContentData)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="c" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="145">In method 'UPnPComplexType.ItemCollection.RemoveContentItem(UPnPComplexType.ContentData)', consider providing a more meaningful name than parameter name 'c'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPComplexType.cs" Line="146">In externally visible method 'UPnPComplexType.ItemCollection.RemoveContentItem(UPnPComplexType.ContentData)', validate parameter 'c' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+Restriction" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Restriction'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#PATTERN" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.Restriction.PATTERN' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+RestrictionExtension" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.RestrictionExtension'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#baseType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.RestrictionExtension.baseType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#baseTypeNS" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.RestrictionExtension.baseTypeNS' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPComplexType+Sequence" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.Sequence'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPComplexType+SimpleContent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPComplexType.SimpleContent'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#RestExt" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPComplexType.SimpleContent.RestExt' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPControlPoint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPControlPoint' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPControlPoint'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateDeviceAsync(System.Uri,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LifeTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="130">In member 'UPnPControlPoint.CreateDeviceAsync(Uri, int)', the compound word 'LifeTime' in parameter name 'LifeTime' exists as a discrete term. If your usage is intended to be single word, case it as 'Lifetime' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Description" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="130">In member 'UPnPControlPoint.CreateDeviceAsync(Uri, int)', correct the casing of 'Description' in parameter name 'DescriptionURL' by changing it to 'description'.</Issue>
            </Message>
            <Message Id="Life" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="130">In member 'UPnPControlPoint.CreateDeviceAsync(Uri, int)', correct the casing of 'Life' in parameter name 'LifeTime' by changing it to 'life'.</Issue>
            </Message>
            <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="130">In member 'UPnPControlPoint.CreateDeviceAsync(Uri, int)', correct the casing of 'URL' in parameter name 'DescriptionURL' by changing it to 'Url'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateSyncCallback(OpenSource.UPnP.UPnPDevice,System.Uri)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="147">'UPnPControlPoint.CreateSyncCallback(UPnPDevice, Uri)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Finalize()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="101">'UPnPControlPoint' implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindDeviceAsync(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Search" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="162">In member 'UPnPControlPoint.FindDeviceAsync(string)', correct the casing of 'Search' in parameter name 'SearchTarget' by changing it to 'search'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindDeviceAsync(System.String,System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Remote" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="169">In member 'UPnPControlPoint.FindDeviceAsync(string, IPAddress)', correct the casing of 'Remote' in parameter name 'RemoteAddress' by changing it to 'remote'.</Issue>
            </Message>
            <Message Id="Search" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="169">In member 'UPnPControlPoint.FindDeviceAsync(string, IPAddress)', correct the casing of 'Search' in parameter name 'SearchTarget' by changing it to 'search'.</Issue>
            </Message>
            <Message Id="RemoteAddress" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="169">Parameter 'RemoteAddress' of 'UPnPControlPoint.FindDeviceAsync(string, IPAddress)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindDeviceAsync(System.String,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="198">In method 'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)', call System.IDisposable.Dispose on object 'session' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="220">Modify 'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Remote" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="178">In member 'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)', correct the casing of 'Remote' in parameter name 'RemoteEP' by changing it to 'remote'.</Issue>
            </Message>
            <Message Id="Search" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="178">In member 'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)', correct the casing of 'Search' in parameter name 'SearchTarget' by changing it to 'search'.</Issue>
            </Message>
            <Message Id="lep" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="207">'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)' declares a variable, 'lep', of type 'IPEndPoint', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="183">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="186">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="185">In externally visible method 'UPnPControlPoint.FindDeviceAsync(string, IPEndPoint)', validate parameter 'RemoteEP' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleAlert(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="110">'UPnPControlPoint.HandleAlert(object, object)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="110">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPControlPoint.HandleAlert(object, object)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="RObj" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="110">Parameter 'RObj' of 'UPnPControlPoint.HandleAlert(object, object)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="sender" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="110">Parameter 'sender' of 'UPnPControlPoint.HandleAlert(object, object)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnReceiveSink(System.IAsyncResult)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="242">Modify 'UPnPControlPoint.OnReceiveSink(IAsyncResult)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="ar" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="229">In method 'UPnPControlPoint.OnReceiveSink(IAsyncResult)', correct the spelling of 'ar' in parameter name 'ar' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="231">In externally visible method 'UPnPControlPoint.OnReceiveSink(IAsyncResult)', validate parameter 'ar' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnReceiveSink2(System.Byte[],System.Net.IPEndPoint,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="258">Modify 'UPnPControlPoint.OnReceiveSink2(byte[], IPEndPoint, IPEndPoint)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="281">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UPnPControlPoint.OnReceiveSink2(byte[], IPEndPoint, IPEndPoint)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="283">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPControlPoint.OnReceiveSink2(byte[], IPEndPoint, IPEndPoint)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="289">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPControlPoint.OnReceiveSink2(byte[], IPEndPoint, IPEndPoint)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="291">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPControlPoint.OnReceiveSink2(byte[], IPEndPoint, IPEndPoint)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="291">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPControlPoint.OnReceiveSink2(byte[], IPEndPoint, IPEndPoint)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="274">Replace the call to 'string.operator !=(string, string)' in 'UPnPControlPoint.OnReceiveSink2(byte[], IPEndPoint, IPEndPoint)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PreProcessNotify(System.Net.IPEndPoint,System.String,System.Boolean,System.String,System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="IsAlive" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">Parameter 'IsAlive' of 'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="LocationURL" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">Parameter 'LocationURL' of 'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="MaxAge" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">Parameter 'MaxAge' of 'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="ST" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">Parameter 'ST' of 'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="USN" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">Parameter 'USN' of 'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="source" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPControlPoint.cs" Line="105">Parameter 'source' of 'UPnPControlPoint.PreProcessNotify(IPEndPoint, string, bool, string, string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SyncData" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UPnPControlPoint.SyncData' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnCreateDevice" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPControlPoint.CreateDeviceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPControlPoint.CreateDeviceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPControlPoint.CreateDeviceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnNotify" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'SSDP.NotifyHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'SSDP.NotifyHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'SSDP.NotifyHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'SSDP.NotifyHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSearch" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPControlPoint.SearchHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPControlPoint.SearchHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'UPnPControlPoint.SearchHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPControlPoint.SearchHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPControlPoint+CreateDeviceHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Description" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.CreateDeviceHandler', correct the casing of 'Description' in parameter name 'DescriptionURL' by changing it to 'description'.</Issue>
          </Message>
          <Message Id="Device" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.CreateDeviceHandler', correct the casing of 'Device' in parameter name 'Device' by changing it to 'device'.</Issue>
          </Message>
          <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.CreateDeviceHandler', correct the casing of 'URL' in parameter name 'DescriptionURL' by changing it to 'Url'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPControlPoint.CreateDeviceHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPControlPoint+SearchHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Description" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.SearchHandler', correct the casing of 'Description' in parameter name 'DescriptionLocation' by changing it to 'description'.</Issue>
          </Message>
          <Message Id="Max" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.SearchHandler', correct the casing of 'Max' in parameter name 'MaxAge' by changing it to 'max'.</Issue>
          </Message>
          <Message Id="Response" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.SearchHandler', correct the casing of 'Response' in parameter name 'ResponseFromEndPoint' by changing it to 'response'.</Issue>
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.SearchHandler', correct the casing of 'Response' in parameter name 'ResponseReceivedOnEndPoint' by changing it to 'response'.</Issue>
          </Message>
          <Message Id="Search" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.SearchHandler', correct the casing of 'Search' in parameter name 'SearchTarget' by changing it to 'search'.</Issue>
          </Message>
          <Message Id="USN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPControlPoint.SearchHandler', correct the casing of 'USN' in parameter name 'USN' by changing it to 'usn'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPControlPoint.SearchHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPCustomException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPCustomException' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPCustomException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPCustomException': protected UPnPCustomException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPCustomException': public UPnPCustomException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPCustomException': public UPnPCustomException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPCustomException': public UPnPCustomException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UPnPCustomException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Int32,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Error" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="188">In member 'UPnPCustomException.UPnPCustomException(int, string)', correct the casing of 'Error' in parameter name '_ErrorCode' by changing it to 'error'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="188">In member 'UPnPCustomException.UPnPCustomException(int, string)', correct the casing of 'Error' in parameter name '_ErrorDescription' by changing it to 'error'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="188">In member 'UPnPCustomException.UPnPCustomException(int, string)', remove the underscores from parameter name '_ErrorCode'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="188">In member 'UPnPCustomException.UPnPCustomException(int, string)', remove the underscores from parameter name '_ErrorDescription'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32,System.String,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Error" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="182">In member 'UPnPCustomException.UPnPCustomException(int, string, Exception)', correct the casing of 'Error' in parameter name '_ErrorCode' by changing it to 'error'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="182">In member 'UPnPCustomException.UPnPCustomException(int, string, Exception)', correct the casing of 'Error' in parameter name '_ErrorDescription' by changing it to 'error'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="182">In member 'UPnPCustomException.UPnPCustomException(int, string, Exception)', remove the underscores from parameter name '_ErrorCode'.</Issue>
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="182">In member 'UPnPCustomException.UPnPCustomException(int, string, Exception)', remove the underscores from parameter name '_ErrorDescription'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_EC" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPCustomException._EC' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_ED" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPCustomException._ED' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDebugObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPDebugObject' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPDebugObject'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Obj" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="27">In member 'UPnPDebugObject.UPnPDebugObject(object)', correct the casing of 'Obj' in parameter name 'Obj' by changing it to 'obj'.</Issue>
            </Message>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="27">In member 'UPnPDebugObject.UPnPDebugObject(object)', consider replacing the data type identifier 'Obj' in parameter name 'Obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="tp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="27">In method 'UPnPDebugObject.UPnPDebugObject(Type)', correct the spelling of 'tp' in parameter name 'tp' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetField(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="44">In member 'UPnPDebugObject.GetField(string)', correct the casing of 'Field' in parameter name 'FieldName' by changing it to 'field'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetProperty(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Property" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="59">In member 'UPnPDebugObject.GetProperty(string, object[])', correct the casing of 'Property' in parameter name 'PropertyName' by changing it to 'property'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStaticField(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="39">In member 'UPnPDebugObject.GetStaticField(string)', correct the casing of 'Field' in parameter name 'FieldName' by changing it to 'field'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeNonStaticMethod(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Arg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="65">In member 'UPnPDebugObject.InvokeNonStaticMethod(string, object[])', correct the casing of 'Arg' in parameter name 'Arg' by changing it to 'arg'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="65">In member 'UPnPDebugObject.InvokeNonStaticMethod(string, object[])', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeStaticMethod(System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Arg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="70">In member 'UPnPDebugObject.InvokeStaticMethod(string, object[])', correct the casing of 'Arg' in parameter name 'Arg' by changing it to 'arg'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="70">In member 'UPnPDebugObject.InvokeStaticMethod(string, object[])', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetField(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Arg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="49">In member 'UPnPDebugObject.SetField(string, object)', correct the casing of 'Arg' in parameter name 'Arg' by changing it to 'arg'.</Issue>
            </Message>
            <Message Id="Field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="49">In member 'UPnPDebugObject.SetField(string, object)', correct the casing of 'Field' in parameter name 'FieldName' by changing it to 'field'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetProperty(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Property" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="54">In member 'UPnPDebugObject.SetProperty(string, object)', correct the casing of 'Property' in parameter name 'PropertyName' by changing it to 'property'.</Issue>
            </Message>
            <Message Id="Val" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="54">In member 'UPnPDebugObject.SetProperty(string, object)', correct the casing of 'Val' in parameter name 'Val' by changing it to 'val'.</Issue>
            </Message>
            <Message Id="Val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDebugObject.cs" Line="54">In method 'UPnPDebugObject.SetProperty(string, object)', correct the spelling of 'Val' in parameter name 'Val' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDevice" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="Warning">'UPnPDevice' is coupled with 81 different types from 15 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPDevice' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPDevice'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="381">'UPnPDevice.UPnPDevice()' locks on a reference of type 'Type'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Double,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="411">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.UPnPDevice(double, string)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="413">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.UPnPDevice(double, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="416">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.UPnPDevice(double, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="424">Replace the call to 'string.operator ==(string, string)' in 'UPnPDevice.UPnPDevice(double, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Int32,System.Double,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="463">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.UPnPDevice(int, double, string)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="465">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.UPnPDevice(int, double, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="468">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.UPnPDevice(int, double, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddCustomFieldInDescription(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="220">In member 'UPnPDevice.AddCustomFieldInDescription(string, string, string)', correct the casing of 'Field' in parameter name 'FieldName' by changing it to 'field'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="220">In member 'UPnPDevice.AddCustomFieldInDescription(string, string, string)', correct the casing of 'Field' in parameter name 'FieldValue' by changing it to 'field'.</Issue>
            </Message>
            <Message Id="Namespace" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="220">In member 'UPnPDevice.AddCustomFieldInDescription(string, string, string)', correct the casing of 'Namespace' in parameter name 'Namespace' by changing it to 'namespace'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDevice(OpenSource.UPnP.IUPnPDevice)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="598">In externally visible method 'UPnPDevice.AddDevice(IUPnPDevice)', validate parameter 'device' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddDevice(OpenSource.UPnP.UPnPDevice)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="607">In externally visible method 'UPnPDevice.AddDevice(UPnPDevice)', validate parameter 'device' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddService(OpenSource.UPnP.IUPnPService)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1762">In externally visible method 'UPnPDevice.AddService(IUPnPService)', validate parameter 'service' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddService(OpenSource.UPnP.UPnPService)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1849">Modify 'UPnPDevice.AddService(UPnPService)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1793">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1804">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1816">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1842">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1846">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1784">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1789">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1791">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1800">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1802">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1812">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1814">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddService(UPnPService)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1858">Replace the call to 'string.operator ==(string, string)' in 'UPnPDevice.AddService(UPnPService)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1859">Replace the call to 'string.operator ==(string, string)' in 'UPnPDevice.AddService(UPnPService)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1860">Replace the call to 'string.operator ==(string, string)' in 'UPnPDevice.AddService(UPnPService)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1789">In externally visible method 'UPnPDevice.AddService(UPnPService)', validate parameter 'service' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddVirtualDirectory(System.String,OpenSource.UPnP.UPnPDevice+VirtualDirectoryHandler,OpenSource.UPnP.UPnPDevice+VirtualDirectoryHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Header" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1897">In member 'UPnPDevice.AddVirtualDirectory(string, UPnPDevice.VirtualDirectoryHandler, UPnPDevice.VirtualDirectoryHandler)', correct the casing of 'Header' in parameter name 'HeaderCallback' by changing it to 'header'.</Issue>
            </Message>
            <Message Id="Packet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1897">In member 'UPnPDevice.AddVirtualDirectory(string, UPnPDevice.VirtualDirectoryHandler, UPnPDevice.VirtualDirectoryHandler)', correct the casing of 'Packet' in parameter name 'PacketCallback' by changing it to 'packet'.</Issue>
            </Message>
            <Message Id="dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1897">In method 'UPnPDevice.AddVirtualDirectory(string, UPnPDevice.VirtualDirectoryHandler, UPnPDevice.VirtualDirectoryHandler)', correct the spelling of 'dir' in parameter name 'dir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1898">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.AddVirtualDirectory(string, UPnPDevice.VirtualDirectoryHandler, UPnPDevice.VirtualDirectoryHandler)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1898">In externally visible method 'UPnPDevice.AddVirtualDirectory(string, UPnPDevice.VirtualDirectoryHandler, UPnPDevice.VirtualDirectoryHandler)', validate parameter 'dir' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArchitectureVersion" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_ArchitectureVersion()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1942">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ArchitectureVersion.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1942">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ArchitectureVersion.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
            <Accessor Name="#set_ArchitectureVersion(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1949">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ArchitectureVersion.set(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1950">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ArchitectureVersion.set(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#BaseURL" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.BaseURL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BootID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="81">Correct the casing of 'ID' in member name 'UPnPDevice.BootID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="AddGetter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="81">Because property 'UPnPDevice.BootID' is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildErrorBody(OpenSource.UPnP.UPnPCustomException)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2150">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPDevice.BuildErrorBody(UPnPCustomException)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2162">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildErrorBody(UPnPCustomException)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildNotifyPacket(System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2010">Modify 'UPnPDevice.BuildNotifyPacket(IPAddress)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2021">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildNotifyPacket(IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2025">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildNotifyPacket(IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2037">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildNotifyPacket(IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2019">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildNotifyPacket(IPAddress)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="BaseURL" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="Local" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2001">'BaseURL', a variable declared in 'UPnPDevice.BuildNotifyPacket(IPAddress)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildNotifyPacket2(System.String,System.Collections.ArrayList,System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2065">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildNotifyPacket2(string, ArrayList, IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2077">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildNotifyPacket2(string, ArrayList, IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2089">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.BuildNotifyPacket2(string, ArrayList, IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="BaseURL" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2051">'BaseURL', a parameter declared in 'UPnPDevice.BuildNotifyPacket2(string, ArrayList, IPAddress)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ContainsSearchTarget(System.String,System.String,System.Collections.ArrayList)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Location" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2611">In member 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)', correct the casing of 'Location' in parameter name 'Location' by changing it to 'location'.</Issue>
            </Message>
            <Message Id="Response" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2611">In member 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)', correct the casing of 'Response' in parameter name 'ResponseList' by changing it to 'response'.</Issue>
            </Message>
            <Message Id="ST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2611">In member 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)', correct the casing of 'ST' in parameter name 'ST' by changing it to 'st'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2624">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2635">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2649">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2663">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2679">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2692">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2625">In externally visible method 'UPnPDevice.ContainsSearchTarget(string, string, ArrayList)', validate parameter 'ResponseList' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateEmbeddedDevice(System.Double,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UDN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="342">In member 'UPnPDevice.CreateEmbeddedDevice(double, string)', correct the casing of 'UDN' in parameter name 'UDN' by changing it to 'udn'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateRootDevice(System.Int32,System.Double,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Device" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="332">In member 'UPnPDevice.CreateRootDevice(int, double, string)', correct the casing of 'Device' in parameter name 'DeviceExpiration' by changing it to 'device'.</Issue>
            </Message>
            <Message Id="Root" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="332">In member 'UPnPDevice.CreateRootDevice(int, double, string)', correct the casing of 'Root' in parameter name 'RootDir' by changing it to 'root'.</Issue>
            </Message>
            <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="332">In method 'UPnPDevice.CreateRootDevice(int, double, string)', correct the spelling of 'Dir' in parameter name 'RootDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeviceURN" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="URN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="142">Correct the casing of 'URN' in member name 'UPnPDevice.DeviceURN' by changing it to 'Urn'.</Issue>
            </Message>
            <Message TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="142">Change the type of property 'UPnPDevice.DeviceURN' from string to System.Uri.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_DeviceURN(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="152">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.DeviceURN.set(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#DeviceURN_Prefix" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="URN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="166">Correct the casing of 'URN' in member name 'UPnPDevice.DeviceURN_Prefix' by changing it to 'Urn'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="166">Remove the underscores from member name 'UPnPDevice.DeviceURN_Prefix'.</Issue>
            </Message>
            <Message TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="166">Change the type of property 'UPnPDevice.DeviceURN_Prefix' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DisabledInterface(OpenSource.UPnP.NetworkInfo,System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="746">Modify 'UPnPDevice.DisabledInterface(NetworkInfo, IPAddress)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EmbeddedDevices" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.EmbeddedDevices' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EventProcesser(OpenSource.UPnP.UPnPDevice,OpenSource.UPnP.HTTPMessage,OpenSource.UPnP.HTTPSession,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int64.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1047">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.EventProcesser(UPnPDevice, HTTPMessage, HTTPSession, string)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExpirationTimeout" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ExpirationTimeout' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#favicon" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="favicon" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="302">Correct the casing of 'favicon' in member name 'UPnPDevice.favicon' by changing it to 'Favicon'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FriendlyName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.FriendlyName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(System.String,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1378">In method 'UPnPDevice.Get(string, IPEndPoint)', object 'fs' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'fs' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1332">In method 'UPnPDevice.Get(string, IPEndPoint)', object 'mstm' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'mstm' before all references to it are out of scope.</Issue>
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1347">In method 'UPnPDevice.Get(string, IPEndPoint)', object 'mstm' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'mstm' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1354">'UPnPDevice.Get(string, IPEndPoint)' locks on a reference of type 'Icon'. Replace this with a lock against an object with strong-identity.</Issue>
             <Issue Certainty="75" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1339">'UPnPDevice.Get(string, IPEndPoint)' locks on a reference of type 'Image'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1385">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Get(string, IPEndPoint)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1385">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Get(string, IPEndPoint)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1391">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Get(string, IPEndPoint)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCustomFieldFromDescription(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="228">In member 'UPnPDevice.GetCustomFieldFromDescription(string, string)', correct the casing of 'Field' in parameter name 'FieldName' by changing it to 'field'.</Issue>
            </Message>
            <Message Id="Namespace" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="228">In member 'UPnPDevice.GetCustomFieldFromDescription(string, string)', correct the casing of 'Namespace' in parameter name 'Namespace' by changing it to 'namespace'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCustomFieldFromDescription_Namespaces()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="239">Change 'List&lt;string&gt;' in 'UPnPDevice.GetCustomFieldFromDescription_Namespaces()' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="239">Remove the underscores from member name 'UPnPDevice.GetCustomFieldFromDescription_Namespaces()'.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="239">Change 'UPnPDevice.GetCustomFieldFromDescription_Namespaces()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCustomFieldsFromDescription(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="248">Change 'List&lt;KeyValuePair&lt;string, string&gt;&gt;' in 'UPnPDevice.GetCustomFieldsFromDescription(string)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="248">Consider a design where 'UPnPDevice.GetCustomFieldsFromDescription(string)' doesn't nest generic type 'List&lt;KeyValuePair&lt;string, string&gt;&gt;'.</Issue>
            </Message>
            <Message Id="Namespace" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="248">In member 'UPnPDevice.GetCustomFieldsFromDescription(string)', correct the casing of 'Namespace' in parameter name 'Namespace' by changing it to 'namespace'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDevice(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UDN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="523">In member 'UPnPDevice.GetDevice(string)', correct the casing of 'UDN' in parameter name 'UDN' by changing it to 'udn'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetDevices(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="492">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetDevices(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="492">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetDevices(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="498">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetDevices(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="498">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetDevices(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="492">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetDevices(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="498">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetDevices(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="490">Change the type of parameter 'urn' of method 'UPnPDevice.GetDevices(string)' from string to System.Uri, or provide an overload of 'UPnPDevice.GetDevices(string)', that allows 'urn' to be passed as a System.Uri object.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="492">In externally visible method 'UPnPDevice.GetDevices(string)', validate parameter 'urn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNonRootDeviceXML(System.Net.IPEndPoint,System.Xml.XmlTextWriter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2839">'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' locks on a reference of type 'Image'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2805">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2806">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2807">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2813">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2814">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2815">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2823">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2824">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2825">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2831">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2832">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2833">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2776">Replace the call to 'string.operator !=(string, string)' in 'UPnPDevice.GetNonRootDeviceXML(IPEndPoint, XmlTextWriter)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetRootDeviceXML(System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2708">In method 'UPnPDevice.GetRootDeviceXML(IPEndPoint)', object 'mstream' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'mstream' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="XML" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2707">Correct the casing of 'XML' in member name 'UPnPDevice.GetRootDeviceXML(IPEndPoint)' by changing it to 'Xml'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2721">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetRootDeviceXML(IPEndPoint)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2722">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetRootDeviceXML(IPEndPoint)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2715">Replace the call to 'string.operator !=(string, string)' in 'UPnPDevice.GetRootDeviceXML(IPEndPoint)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetService(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="535">In member 'UPnPDevice.GetService(string)', correct the casing of 'ID' in parameter name 'ServiceID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Service" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="535">In member 'UPnPDevice.GetService(string)', correct the casing of 'Service' in parameter name 'ServiceID' by changing it to 'service'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="536">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetService(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="536">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetService(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="536">In externally visible method 'UPnPDevice.GetService(string)', validate parameter 'ServiceID' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetServices(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="515">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetServices(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="515">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetServices(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="515">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.GetServices(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="511">Change the type of parameter 'urn' of method 'UPnPDevice.GetServices(string)' from string to System.Uri, or provide an overload of 'UPnPDevice.GetServices(string)', that allows 'urn' to be passed as a System.Uri object.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="515">In externally visible method 'UPnPDevice.GetServices(string)', validate parameter 'urn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleEventReceive(OpenSource.UPnP.HTTPSession,OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="966">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPDevice.HandleEventReceive(HTTPSession, HTTPMessage)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="msg" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="966">Parameter 'msg' of 'UPnPDevice.HandleEventReceive(HTTPSession, HTTPMessage)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleHeaderRequest(OpenSource.UPnP.HTTPMessage,OpenSource.UPnP.HTTPSession)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1006">Modify 'UPnPDevice.HandleHeaderRequest(HTTPMessage, HTTPSession)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Method" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="978">'UPnPDevice.HandleHeaderRequest(HTTPMessage, HTTPSession)' declares a variable, 'Method', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="Response" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="977">'UPnPDevice.HandleHeaderRequest(HTTPMessage, HTTPSession)' declares a variable, 'Response', of type 'HTTPMessage', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="parser" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="976">'UPnPDevice.HandleHeaderRequest(HTTPMessage, HTTPSession)' declares a variable, 'parser', of type 'DText', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String,System.Int32)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="991">Because the behavior of 'string.IndexOf(string, int)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleHeaderRequest(HTTPMessage, HTTPSession)' with a call to 'string.IndexOf(string, int, StringComparison)'. If the result of 'string.IndexOf(string, int, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleIcon(OpenSource.UPnP.HttpRequestor,System.Boolean,System.Object,System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2599">In method 'UPnPDevice.HandleIcon(HttpRequestor, bool, object, string, byte[])', call System.IDisposable.Dispose on object 'new MemoryStream(data)' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleSearch(System.String,System.Net.IPEndPoint,System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="x" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1411">'UPnPDevice.HandleSearch(string, IPEndPoint, IPEndPoint)' declares a variable, 'x', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1417">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleSearch(string, IPEndPoint, IPEndPoint)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1423">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleSearch(string, IPEndPoint, IPEndPoint)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1436">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleSearch(string, IPEndPoint, IPEndPoint)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1422">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleSearch(string, IPEndPoint, IPEndPoint)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleWebRequest(OpenSource.UPnP.HTTPMessage,OpenSource.UPnP.HTTPSession)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1056">'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' has a cyclomatic complexity of 34. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1101">Modify 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1210">Modify 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1255">Modify 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="NT" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1228">'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' declares a variable, 'NT', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="parser" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1057">'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' declares a variable, 'parser', of type 'DText', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1237">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1131">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1146">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1191">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1285">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1237">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1243">Replace the call to 'string.operator !=(string, string)' in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1231">Replace the call to 'string.operator ==(string, string)' in 'UPnPDevice.HandleWebRequest(HTTPMessage, HTTPSession)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HasPresentation" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.HasPresentation' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InterfaceToHost" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.InterfaceToHost' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Invoke(System.String,System.String,System.String,OpenSource.UPnP.HTTPSession)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1600">In method 'UPnPDevice.Invoke(string, string, string, HTTPSession)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1626">Replace the call to 'string.operator ==(string, string)' in 'UPnPDevice.Invoke(string, string, string, HTTPSession)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocalIPEndPoints" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="EndPoints" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="832">The compound word 'EndPoints' in member name 'UPnPDevice.LocalIPEndPoints' exists as a discrete term. If your usage is intended to be single word, case it as 'Endpoints' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="832">Change 'UPnPDevice.LocalIPEndPoints' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocationURL" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.LocationURL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Major" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.Major' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Manufacturer" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.Manufacturer' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ManufacturerURL" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ManufacturerURL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Minor" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.Minor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ModelDescription" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ModelDescription' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ModelName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ModelName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ModelNumber" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ModelNumber' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ModelURL" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ModelURL' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NewCPInterface(OpenSource.UPnP.NetworkInfo,System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="687">'UPnPDevice.NewCPInterface(NetworkInfo, IPAddress)' locks on a reference of type 'Type'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String,System.Uri,System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2223">In method 'UPnPDevice.Parse(string, Uri, IPAddress)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2309">Modify 'UPnPDevice.Parse(string, Uri, IPAddress)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2252">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Parse(string, Uri, IPAddress)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2255">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Parse(string, Uri, IPAddress)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2305">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Parse(string, Uri, IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2305">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Parse(string, Uri, IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2311">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Parse(string, Uri, IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2311">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Parse(string, Uri, IPAddress)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2221">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Parse(string, Uri, IPAddress)' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseDevice(System.String,System.Int32,OpenSource.UPnP.UPnPDevice&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2365">'UPnPDevice.ParseDevice(string, int, ref UPnPDevice)' has a cyclomatic complexity of 47. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2370">In method 'UPnPDevice.ParseDevice(string, int, ref UPnPDevice)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2441">Modify 'UPnPDevice.ParseDevice(string, int, ref UPnPDevice)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="p" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2369">'UPnPDevice.ParseDevice(string, int, ref UPnPDevice)' declares a variable, 'p', of type 'DText', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2524">'UPnPDevice.ParseDevice(string, int, ref UPnPDevice)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2504">Replace the call to 'string.operator !=(string, string)' in 'UPnPDevice.ParseDevice(string, int, ref UPnPDevice)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseDeviceList(System.String,System.Int32,OpenSource.UPnP.UPnPDevice&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2320">In method 'UPnPDevice.ParseDeviceList(string, int, ref UPnPDevice)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2355">'UPnPDevice.ParseDeviceList(string, int, ref UPnPDevice)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseEventURL(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1483">Modify 'UPnPDevice.ParseEventURL(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1466">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPDevice.ParseEventURL(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1480">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseEventURL(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseIconXML(OpenSource.UPnP.UPnPDevice,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2536">In method 'UPnPDevice.ParseIconXML(UPnPDevice, int, string)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2582">'UPnPDevice.ParseIconXML(UPnPDevice, int, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2566">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseIconXML(UPnPDevice, int, string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2570">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseIconXML(UPnPDevice, int, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2582">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseIconXML(UPnPDevice, int, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2582">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseIconXML(UPnPDevice, int, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2566">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseIconXML(UPnPDevice, int, string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2568">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseIconXML(UPnPDevice, int, string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseInvokeResponse(System.String,System.String,System.String,System.Object,OpenSource.UPnP.UPnPArgument[])" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1679">In method 'UPnPDevice.ParseInvokeResponse(string, string, string, object, UPnPArgument[])', object 'mstream' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'mstream' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1697">'RetVal', a parameter, is cast to type 'UPnPArgument' multiple times in method 'UPnPDevice.ParseInvokeResponse(string, string, string, object, UPnPArgument[])'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1677">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPDevice.ParseInvokeResponse(string, string, string, object, UPnPArgument[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1692">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ParseInvokeResponse(string, string, string, object, UPnPArgument[])' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PresentationURL" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1882">Correct the casing of 'URL' in member name 'UPnPDevice.PresentationURL' by changing it to 'Url'.</Issue>
            </Message>
            <Message TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1882">Change the type of property 'UPnPDevice.PresentationURL' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessDevice_EVENTCALLBACK(OpenSource.UPnP.UPnPDevice)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="656">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ProcessDevice_EVENTCALLBACK(UPnPDevice)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="660">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.ProcessDevice_EVENTCALLBACK(UPnPDevice)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProductCode" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ProductCode' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProprietaryDeviceType" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.ProprietaryDeviceType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveIPv6Scope(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2865">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPDevice.RemoveIPv6Scope(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveService(OpenSource.UPnP.IUPnPService)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1734">In externally visible method 'UPnPDevice.RemoveService(IUPnPService)', validate parameter 'service' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RenewEvents(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1542">'UPnPDevice.RenewEvents(string, string, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1550">'UPnPDevice.RenewEvents(string, string, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Reserved" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.Reserved' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerialNumber" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.SerialNumber' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Services" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.Services' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetVersion(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1975">'UPnPDevice.SetVersion(string)' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1977">'UPnPDevice.SetVersion(string)' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1961">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.SetVersion(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StandardDeviceType" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#set_StandardDeviceType(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1917">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.StandardDeviceType.set(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#StartDevice()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="863">'UPnPDevice.StartDevice()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="868">'UPnPDevice.StartDevice()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartDevice(System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Port" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="824">In member 'UPnPDevice.StartDevice(int)', correct the casing of 'Port' in parameter name 'PortNumber' by changing it to 'port'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StartDevice(System.Net.IPEndPoint)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="814">'UPnPDevice.StartDevice(IPEndPoint)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="819">'UPnPDevice.StartDevice(IPEndPoint)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Manual" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="803">In member 'UPnPDevice.StartDevice(IPEndPoint)', correct the casing of 'Manual' in parameter name 'Manual' by changing it to 'manual'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="809">In externally visible method 'UPnPDevice.StartDevice(IPEndPoint)', validate parameter 'Manual' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StopDevice()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="900">'UPnPDevice.StopDevice()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="905">'UPnPDevice.StopDevice()' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SubscribeEvents(System.String&amp;,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1585">'UPnPDevice.SubscribeEvents(ref string, string, string, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TestDeviceParsing(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2872">In member 'UPnPDevice.TestDeviceParsing(string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="2873">In method 'UPnPDevice.TestDeviceParsing(string)', call System.IDisposable.Dispose on object 'f' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UniqueDeviceName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.UniqueDeviceName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateDevice(System.Uri,System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Host" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="727">In member 'UPnPDevice.UpdateDevice(Uri, IPAddress)', correct the casing of 'Host' in parameter name 'HostInterface' by changing it to 'host'.</Issue>
            </Message>
            <Message Id="Location" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="727">In member 'UPnPDevice.UpdateDevice(Uri, IPAddress)', correct the casing of 'Location' in parameter name 'LocationUri' by changing it to 'location'.</Issue>
            </Message>
            <Message Id="HostInterface" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="727">Parameter 'HostInterface' of 'UPnPDevice.UpdateDevice(Uri, IPAddress)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#User" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.User' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#User2" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.User2' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#User3" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPDevice.User3' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Version" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Version()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1930">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Version.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1934">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Version.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="1934">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.Version.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#OnRemoved" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPDevice.OnRemovedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPDevice.OnRemovedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPDevice.OnRemovedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDevice+DeviceUpdateHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDevice.DeviceUpdateHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPDevice+FrindlyNameComparer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Frindly" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Frindly' in type name 'UPnPDevice.FrindlyNameComparer'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDevice.FrindlyNameComparer'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Compare(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="96">In member 'UPnPDevice.FrindlyNameComparer.Compare(object, object)', change parameter name 'o1' to 'x' in order to match the identifier as it has been declared in 'IComparer.Compare(object, object)'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="96">In member 'UPnPDevice.FrindlyNameComparer.Compare(object, object)', change parameter name 'o2' to 'y' in order to match the identifier as it has been declared in 'IComparer.Compare(object, object)'.</Issue>
            </Message>
            <Message Id="System.String.Compare(System.String,System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="99">Because the behavior of 'string.Compare(string, string)' could vary based on the current user's locale settings, replace this call in 'UPnPDevice.FrindlyNameComparer.Compare(object, object)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDevice+OnRemovedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDevice.OnRemovedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPDevice+VirtualDirectoryHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Virtual" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPDevice.VirtualDirectoryHandler', correct the casing of 'Virtual' in parameter name 'VirtualDir' by changing it to 'virtual'.</Issue>
          </Message>
          <Message Id="Web" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPDevice.VirtualDirectoryHandler', correct the casing of 'Web' in parameter name 'WebSession' by changing it to 'web'.</Issue>
          </Message>
          <Message Id="Dir" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'UPnPDevice.VirtualDirectoryHandler', correct the spelling of 'Dir' in parameter name 'VirtualDir' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="75" Level="CriticalWarning">In delegate 'UPnPDevice.VirtualDirectoryHandler', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDevice.VirtualDirectoryHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPDeviceComparer_Type" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPDeviceComparer_Type' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPDeviceComparer_Type'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Remove the underscores from type name 'UPnPDeviceComparer_Type'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Compare(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Compare(System.String,System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDevice.cs" Line="46">Because the behavior of 'string.Compare(string, string)' could vary based on the current user's locale settings, replace this call in 'UPnPDeviceComparer_Type.Compare(object, object)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDeviceFactory" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPDeviceFactory' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPDeviceFactory'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Uri,System.Int32,OpenSource.UPnP.UPnPDeviceFactory+UPnPDeviceHandler,OpenSource.UPnP.UPnPDeviceFactory+UPnPDeviceFailedHandler,System.Net.IPAddress,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Desc" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="51">In member 'UPnPDeviceFactory.UPnPDeviceFactory(Uri, int, UPnPDeviceFactory.UPnPDeviceHandler, UPnPDeviceFactory.UPnPDeviceFailedHandler, IPAddress, string)', correct the casing of 'Desc' in parameter name 'DescLocation' by changing it to 'desc'.</Issue>
            </Message>
            <Message Id="Max" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="51">In member 'UPnPDeviceFactory.UPnPDeviceFactory(Uri, int, UPnPDeviceFactory.UPnPDeviceHandler, UPnPDeviceFactory.UPnPDeviceFailedHandler, IPAddress, string)', correct the casing of 'Max' in parameter name 'MaxSeconds' by changing it to 'max'.</Issue>
            </Message>
            <Message Id="Desc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="51">In method 'UPnPDeviceFactory.UPnPDeviceFactory(Uri, int, UPnPDeviceFactory.UPnPDeviceHandler, UPnPDeviceFactory.UPnPDeviceFailedHandler, IPAddress, string)', correct the spelling of 'Desc' in parameter name 'DescLocation' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="localaddr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="51">In method 'UPnPDeviceFactory.UPnPDeviceFactory(Uri, int, UPnPDeviceFactory.UPnPDeviceHandler, UPnPDeviceFactory.UPnPDeviceFailedHandler, IPAddress, string)', correct the spelling of 'localaddr' in parameter name 'localaddr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="usn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="51">In method 'UPnPDeviceFactory.UPnPDeviceFactory(Uri, int, UPnPDeviceFactory.UPnPDeviceHandler, UPnPDeviceFactory.UPnPDeviceFailedHandler, IPAddress, string)', correct the spelling of 'usn' in parameter name 'usn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="79">In externally visible method 'UPnPDeviceFactory.UPnPDeviceFactory(Uri, int, UPnPDeviceFactory.UPnPDeviceHandler, UPnPDeviceFactory.UPnPDeviceFailedHandler, IPAddress, string)', validate parameter 'DescLocation' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CreateDevice(System.Uri,System.Int32,System.Net.IPAddress,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Desc" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="91">In member 'UPnPDeviceFactory.CreateDevice(Uri, int, IPAddress, string)', correct the casing of 'Desc' in parameter name 'DescLocation' by changing it to 'desc'.</Issue>
            </Message>
            <Message Id="Max" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="91">In member 'UPnPDeviceFactory.CreateDevice(Uri, int, IPAddress, string)', correct the casing of 'Max' in parameter name 'MaxSeconds' by changing it to 'max'.</Issue>
            </Message>
            <Message Id="Desc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="91">In method 'UPnPDeviceFactory.CreateDevice(Uri, int, IPAddress, string)', correct the spelling of 'Desc' in parameter name 'DescLocation' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="localaddr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="91">In method 'UPnPDeviceFactory.CreateDevice(Uri, int, IPAddress, string)', correct the spelling of 'localaddr' in parameter name 'localaddr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="usn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="91">In method 'UPnPDeviceFactory.CreateDevice(Uri, int, IPAddress, string)', correct the spelling of 'usn' in parameter name 'usn' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="localaddr" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="91">'localaddr', a parameter declared in 'UPnPDeviceFactory.CreateDevice(Uri, int, IPAddress, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DUrl" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UPnPDeviceFactory.DUrl' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#httprequestor_OnRequestCompleted(OpenSource.UPnP.HttpRequestor,System.Boolean,System.Object,System.String,System.Byte[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="147">'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="202">'tag', a parameter, is cast to type 'UPnPService' multiple times in method 'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="169">Modify 'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="200">Modify 'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="226">Modify 'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="164">'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="185">'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="229">'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="236">'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="243">'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="242">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="243">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UPnPDeviceFactory.httprequestor_OnRequestCompleted(HttpRequestor, bool, object, string, byte[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Shutdown()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceFactory.cs" Line="124">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPDeviceFactory.Shutdown()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnDevice" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPDeviceFactory.UPnPDeviceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPDeviceFactory.UPnPDeviceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'UPnPDeviceFactory.UPnPDeviceHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPDeviceFactory.UPnPDeviceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPDeviceFactory.UPnPDeviceFailedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPDeviceFactory.UPnPDeviceFailedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'UPnPDeviceFactory.UPnPDeviceFailedHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPDeviceFactory.UPnPDeviceFailedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDeviceFactory+UPnPDeviceFailedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPDeviceFactory.UPnPDeviceFailedHandler' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPDeviceFactory.UPnPDeviceFailedHandler', correct the casing of 'URL' in parameter name 'URL' by changing it to 'url'.</Issue>
          </Message>
          <Message Id="URN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPDeviceFactory.UPnPDeviceFailedHandler', correct the casing of 'URN' in parameter name 'URN' by changing it to 'urn'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPDeviceFactory.UPnPDeviceFailedHandler'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In delegate 'UPnPDeviceFactory.UPnPDeviceFailedHandler', consider providing a more meaningful name than parameter name 'e'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDeviceFactory.UPnPDeviceFailedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Invoke(OpenSource.UPnP.UPnPDeviceFactory,System.Uri,System.Exception,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="3#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error">Change the type of parameter 'URN' of method 'UPnPDeviceFactory.UPnPDeviceFailedHandler.Invoke(UPnPDeviceFactory, Uri, Exception, string)' from string to System.Uri, or provide an overload of 'UPnPDeviceFactory.UPnPDeviceFailedHandler.Invoke(UPnPDeviceFactory, Uri, Exception, string)', that allows 'URN' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDeviceFactory+UPnPDeviceHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPDeviceFactory.UPnPDeviceHandler' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="URL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPDeviceFactory.UPnPDeviceHandler', correct the casing of 'URL' in parameter name 'URL' by changing it to 'url'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPDeviceFactory.UPnPDeviceHandler'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDeviceFactory.UPnPDeviceHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPDeviceWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPDeviceWatcher' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPDeviceWatcher'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OpenSource.UPnP.UPnPDevice)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="d" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceWatcher.cs" Line="32">In method 'UPnPDeviceWatcher.UPnPDeviceWatcher(UPnPDevice)', consider providing a more meaningful name than parameter name 'd'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPDeviceWatcher.cs" Line="35">In externally visible method 'UPnPDeviceWatcher.UPnPDeviceWatcher(UPnPDevice)', validate parameter 'd' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#W" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UPnPDeviceWatcher.W' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniff" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPDeviceWatcher.SniffHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPDeviceWatcher.SniffHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'UPnPDeviceWatcher.SniffHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPDeviceWatcher.SniffHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniffPacket" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPDeviceWatcher.SniffPacketHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPDeviceWatcher.SniffPacketHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPDeviceWatcher.SniffPacketHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPDeviceWatcher+SniffHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDeviceWatcher.SniffHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPDeviceWatcher+SniffPacketHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Packet" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPDeviceWatcher.SniffPacketHandler', correct the casing of 'Packet' in parameter name 'Packet' by changing it to 'packet'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPDeviceWatcher.SniffPacketHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPInternalSmartControlPoint" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#RemoveMe(OpenSource.UPnP.UPnPDevice)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPInternalSmartControlPoint.cs" Line="250">'UPnPInternalSmartControlPoint.RemoveMe(UPnPDevice)' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPInvokeException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPInvokeException' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPInvokeException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPInvokeException': protected UPnPInvokeException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPInvokeException': public UPnPInvokeException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPInvokeException': public UPnPInvokeException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPInvokeException': public UPnPInvokeException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UPnPInvokeException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,OpenSource.UPnP.UPnPArgument[],System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Args" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In member 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string)', correct the casing of 'Args' in parameter name 'Args' by changing it to 'args'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In member 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string)', correct the casing of 'Method' in parameter name 'Method_Name' by changing it to 'method'.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In method 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In member 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string)', remove the underscores from parameter name 'Method_Name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,OpenSource.UPnP.UPnPArgument[],System.String,OpenSource.UPnP.UPnPCustomException)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Args" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In member 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string, UPnPCustomException)', correct the casing of 'Args' in parameter name 'Args' by changing it to 'args'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In member 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string, UPnPCustomException)', correct the casing of 'Method' in parameter name 'Method_Name' by changing it to 'method'.</Issue>
            </Message>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In method 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string, UPnPCustomException)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In method 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string, UPnPCustomException)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="138">In member 'UPnPInvokeException.UPnPInvokeException(string, UPnPArgument[], string, UPnPCustomException)', remove the underscores from parameter name 'Method_Name'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_Inner" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPInvokeException._Inner' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Arguments" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPInvokeException.Arguments' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MethodName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPInvokeException.MethodName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPNP" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UPNP" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="142">Correct the casing of 'UPNP' in member name 'UPnPInvokeException.UPNP' by changing it to 'Upnp'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPModeratedStateVariable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPModeratedStateVariable' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPModeratedStateVariable'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, object)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, object)', correct the casing of 'Var' in parameter name 'VarValue' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Object,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Allowed" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, object, string[])', correct the casing of 'Allowed' in parameter name 'AllowedValues' by changing it to 'allowed'.</Issue>
            </Message>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, object, string[])', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, object, string[])', correct the casing of 'Var' in parameter name 'VarValue' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Type,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Send" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, Type, bool)', correct the casing of 'Send' in parameter name 'SendEvents' by changing it to 'send'.</Issue>
            </Message>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, Type, bool)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="71">In member 'UPnPModeratedStateVariable.UPnPModeratedStateVariable(string, Type, bool)', correct the casing of 'Var' in parameter name 'VarType' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Accumulator" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPModeratedStateVariable.Accumulator' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LifeTimeSink(OpenSource.UPnP.LifeTimeMonitor,System.Object)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="LifeTime" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="98">The compound word 'LifeTime' in member name 'UPnPModeratedStateVariable.LifeTimeSink(LifeTimeMonitor, object)' exists as a discrete term. If your usage is intended to be single word, case it as 'Lifetime' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Obj" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="98">In member 'UPnPModeratedStateVariable.LifeTimeSink(LifeTimeMonitor, object)', correct the casing of 'Obj' in parameter name 'Obj' by changing it to 'obj'.</Issue>
            </Message>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPModeratedStateVariable.cs" Line="98">In member 'UPnPModeratedStateVariable.LifeTimeSink(LifeTimeMonitor, object)', consider replacing the data type identifier 'Obj' in parameter name 'Obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PendingEvents" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPModeratedStateVariable.PendingEvents' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PendingObject" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPModeratedStateVariable.PendingObject' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Seconds" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPModeratedStateVariable.Seconds' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#t" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPModeratedStateVariable.t' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberMoreMeaningfulName" Certainty="75" Level="CriticalWarning">Consider providing a more meaningful name than member name 'UPnPModeratedStateVariable.t'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPModeratedStateVariable+DefaultAccumulator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPModeratedStateVariable.DefaultAccumulator'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPModeratedStateVariable+IAccumulator" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPModeratedStateVariable.IAccumulator'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Merge(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="newobject" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'UPnPModeratedStateVariable.IAccumulator.Merge(object, object)', correct the spelling of 'newobject' in parameter name 'newobject' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPService" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="Warning">'UPnPService' is coupled with 90 different types from 14 different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above 95 indicates poor maintainability, a class coupling between 95 and 80 indicates moderate maintainability, and a class coupling below 80 indicates good maintainability.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPService' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPService'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Double)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.TryParse(System.String,System.Int32@)" TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="TryParse" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1870">'UPnPService.UPnPService(double)' calls 'int.TryParse(string, out int)' but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1866">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.UPnPService(double)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1868">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.UPnPService(double)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Double,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Instance" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1908">In member 'UPnPService.UPnPService(double, object)', correct the casing of 'Instance' in parameter name 'InstanceObject' by changing it to 'instance'.</Issue>
            </Message>
            <Message Id="object" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1908">In member 'UPnPService.UPnPService(double, object)', consider replacing the data type identifier 'Object' in parameter name 'InstanceObject' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Double,System.String,System.String,System.Boolean,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1882">In member 'UPnPService.UPnPService(double, string, string, bool, object)', correct the casing of 'ID' in parameter name 'serviceID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Instance" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1882">In member 'UPnPService.UPnPService(double, string, string, bool, object)', correct the casing of 'Instance' in parameter name 'Instance' by changing it to 'instance'.</Issue>
            </Message>
            <Message Id="Is" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1882">In member 'UPnPService.UPnPService(double, string, string, bool, object)', correct the casing of 'Is' in parameter name 'IsStandardService' by changing it to 'is'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1887">Replace the call to 'string.operator ==(string, string)' in 'UPnPService.UPnPService(double, string, string, bool, object)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_RenewEvent(System.String,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2402">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService._RenewEvent(string, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_SubscribeEvent(System.String&amp;,System.String,System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2360">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService._SubscribeEvent(out string, string, string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_TriggerEvent(System.String,System.Int64,System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="SID" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4235">Parameter 'SID' of 'UPnPService._TriggerEvent(string, long, string, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Actions" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="SameType" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3310">The property name 'UPnPService.Actions' is confusing given the existence of method 'UPnPService.GetActions()'. Rename or remove one of these members.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddComplexType(OpenSource.UPnP.UPnPComplexType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1360">In method 'UPnPService.AddComplexType(UPnPComplexType)', consider providing a more meaningful name than parameter name 't'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1372">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.AddComplexType(UPnPComplexType)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1361">In externally visible method 'UPnPService.AddComplexType(UPnPComplexType)', validate parameter 't' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddMethod(OpenSource.UPnP.UPnPAction)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3718">'UPnPService.AddMethod(UPnPAction)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'UPnPService.AddMethod(UPnPAction)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddMethod(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3764">'UPnPService.AddMethod(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3755">In member 'UPnPService.AddMethod(string)', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddStateVariable(OpenSource.UPnP.UPnPStateVariable)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3908">'UPnPService.AddStateVariable(UPnPStateVariable)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="New" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3880">In member 'UPnPService.AddStateVariable(UPnPStateVariable)', correct the casing of 'New' in parameter name 'NewVar' by changing it to 'new'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3908">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'UPnPService.AddStateVariable(UPnPStateVariable)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3881">In externally visible method 'UPnPService.AddStateVariable(UPnPStateVariable)', validate parameter 'NewVar' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildEventXML(OpenSource.UPnP.UPnPStateVariable[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4014">In method 'UPnPService.BuildEventXML(UPnPStateVariable[])', object 'ms' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'ms' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4013">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPService.BuildEventXML(UPnPStateVariable[])' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ControlURL" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_ControlURL()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1749">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.ControlURL.get()' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#CreateObjectInstance(System.Type,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3395">'UPnPService.CreateObjectInstance(Type, string)' has a cyclomatic complexity of 43. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3473">'UPnPService.CreateObjectInstance(Type, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3487">'UPnPService.CreateObjectInstance(Type, string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Object" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3395">In member 'UPnPService.CreateObjectInstance(Type, string)', correct the casing of 'Object' in parameter name 'ObjectType' by changing it to 'object'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3505">Replace the call to 'string.operator ==(string, string)' in 'UPnPService.CreateObjectInstance(Type, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3405">In externally visible method 'UPnPService.CreateObjectInstance(Type, string)', validate parameter 'ObjectType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DelayedInvokeResponse(System.Int64,System.Object,OpenSource.UPnP.UPnPArgument[],OpenSource.UPnP.UPnPCustomException)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Out" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4295">In member 'UPnPService.DelayedInvokeResponse(long, object, UPnPArgument[], UPnPCustomException)', correct the casing of 'Out' in parameter name 'OutArgs' by changing it to 'out'.</Issue>
            </Message>
            <Message Id="Ret" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4295">In member 'UPnPService.DelayedInvokeResponse(long, object, UPnPArgument[], UPnPCustomException)', correct the casing of 'Ret' in parameter name 'RetArg' by changing it to 'ret'.</Issue>
            </Message>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4295">In method 'UPnPService.DelayedInvokeResponse(long, object, UPnPArgument[], UPnPCustomException)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DelayInvokeRespose(System.Int64,OpenSource.UPnP.UPnPArgument[]&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4276">Consider a design that does not require that 'OutArgs' be an out parameter.</Issue>
            </Message>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterAbbreviation" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4276">In member 'UPnPService.DelayInvokeRespose(long, out UPnPArgument[])', correct the casing of 'ID' in parameter name 'ID' by changing it to 'id'. 'id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
            <Message Id="Out" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4276">In member 'UPnPService.DelayInvokeRespose(long, out UPnPArgument[])', correct the casing of 'Out' in parameter name 'OutArgs' by changing it to 'out'.</Issue>
            </Message>
            <Message Id="Respose" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4276">Correct the spelling of 'Respose' in member name 'UPnPService.DelayInvokeRespose(long, out UPnPArgument[])' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1927">Replace the call to 'string.operator !=(string, string)' in 'UPnPService.Dispose()' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EventSessionTable" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UPnPService.EventSessionTable' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EventURL" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_EventURL()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1769">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.EventURL.get()' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#FromSCPD(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SCPD" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2416">Correct the casing of 'SCPD' in member name 'UPnPService.FromSCPD(string)' by changing it to 'Scpd'.</Issue>
            </Message>
            <Message Id="SCPDXML" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2416">In member 'UPnPService.FromSCPD(string)', correct the casing of 'SCPDXML' in parameter name 'SCPDXML' by changing it to 'scpdxml'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAction(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Action" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1981">In member 'UPnPService.GetAction(string)', correct the casing of 'Action' in parameter name 'ActionName' by changing it to 'action'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCaller()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4245">Change 'UPnPService.GetCaller()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetComplexSchemaForNamespace(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1436">In method 'UPnPService.GetComplexSchemaForNamespace(string)', call System.IDisposable.Dispose on object 'm' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetComplexTypeList_Group()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1376">Remove the underscores from member name 'UPnPService.GetComplexTypeList_Group()'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNewSID()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2240">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.GetNewSID()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetReceiver()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4261">Change 'UPnPService.GetReceiver()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSCPDXml()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2940">In method 'UPnPService.GetSCPDXml()', object 'mstr' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'mstr' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="SCPD" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2937">Correct the casing of 'SCPD' in member name 'UPnPService.GetSCPDXml()' by changing it to 'Scpd'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetServiceXML(System.Xml.XmlTextWriter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3007">Consider changing the type of parameter 'XDoc' in 'UPnPService.GetServiceXML(XmlTextWriter)' from 'XmlTextWriter' to its base type 'XmlWriter'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3007">In member 'UPnPService.GetServiceXML(XmlTextWriter)', correct the casing of 'X' in parameter name 'XDoc' by changing it to 'x'.</Issue>
            </Message>
            <Message Id="XML" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3007">Correct the casing of 'XML' in member name 'UPnPService.GetServiceXML(XmlTextWriter)' by changing it to 'Xml'.</Issue>
            </Message>
            <Message Id="X" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3007">In method 'UPnPService.GetServiceXML(XmlTextWriter)', correct the spelling of 'X' in parameter name 'XDoc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3008">In externally visible method 'UPnPService.GetServiceXML(XmlTextWriter)', validate parameter 'XDoc' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStateVariable(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3995">In member 'UPnPService.GetStateVariable(string)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStateVariableObject(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3977">In member 'UPnPService.GetStateVariableObject(string)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStateVariableObject(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Arg" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3951">In member 'UPnPService.GetStateVariableObject(string, string)', correct the casing of 'Arg' in parameter name 'ArgName' by changing it to 'arg'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3951">In member 'UPnPService.GetStateVariableObject(string, string)', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeFromUnknown(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4204">Modify 'UPnPService.GetTypeFromUnknown(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4230">'UPnPService.GetTypeFromUnknown(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4195">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPService.GetTypeFromUnknown(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleInvokeRequest(OpenSource.UPnP.HTTPRequest,OpenSource.UPnP.HTTPMessage,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3134">'UPnPService.HandleInvokeRequest(HTTPRequest, HTTPMessage, object)' has a cyclomatic complexity of 31. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3214">In method 'UPnPService.HandleInvokeRequest(HTTPRequest, HTTPMessage, object)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3174">Modify 'UPnPService.HandleInvokeRequest(HTTPRequest, HTTPMessage, object)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="temp" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3260">'UPnPService.HandleInvokeRequest(HTTPRequest, HTTPMessage, object)' declares a variable, 'temp', of type 'object[]', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3171">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.HandleInvokeRequest(HTTPRequest, HTTPMessage, object)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleSubscribeResponse(OpenSource.UPnP.HTTPRequest,OpenSource.UPnP.HTTPMessage,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2103">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.HandleSubscribeResponse(HTTPRequest, HTTPMessage, object)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeAsync(System.String,OpenSource.UPnP.UPnPArgument[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="InVar" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3129">In member 'UPnPService.InvokeAsync(string, UPnPArgument[])', the compound word 'InVar' in parameter name 'InVarArr' exists as a discrete term. If your usage is intended to be single word, case it as 'Invar' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="In" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3129">In member 'UPnPService.InvokeAsync(string, UPnPArgument[])', correct the casing of 'In' in parameter name 'InVarArr' by changing it to 'in'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3129">In member 'UPnPService.InvokeAsync(string, UPnPArgument[])', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
            <Message Id="Arr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3129">In method 'UPnPService.InvokeAsync(string, UPnPArgument[])', correct the spelling of 'Arr' in parameter name 'InVarArr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeAsync(System.String,OpenSource.UPnP.UPnPArgument[],System.Object,OpenSource.UPnP.UPnPService+UPnPServiceInvokeHandler,OpenSource.UPnP.UPnPService+UPnPServiceInvokeErrorHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="InVar" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3050">In member 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', the compound word 'InVar' in parameter name 'InVarArr' exists as a discrete term. If your usage is intended to be single word, case it as 'Invar' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3080">In method 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', object 'mstream' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'mstream' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="Error" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3050">In member 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', correct the casing of 'Error' in parameter name 'ErrorCallback' by changing it to 'error'.</Issue>
            </Message>
            <Message Id="In" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3050">In member 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', correct the casing of 'In' in parameter name 'InVarArr' by changing it to 'in'.</Issue>
            </Message>
            <Message Id="Invoke" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3050">In member 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', correct the casing of 'Invoke' in parameter name 'InvokeCallback' by changing it to 'invoke'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3050">In member 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
            <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3050">In member 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
            </Message>
            <Message Id="Arr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3050">In method 'UPnPService.InvokeAsync(string, UPnPArgument[], object, UPnPService.UPnPServiceInvokeHandler, UPnPService.UPnPServiceInvokeErrorHandler)', correct the spelling of 'Arr' in parameter name 'InVarArr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeLocal(System.String,System.Collections.ArrayList&amp;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3657">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.InvokeLocal(string, ref ArrayList)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeSync(System.String,OpenSource.UPnP.UPnPArgument[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="InVar" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3325">In member 'UPnPService.InvokeSync(string, UPnPArgument[])', the compound word 'InVar' in parameter name 'InVarArr' exists as a discrete term. If your usage is intended to be single word, case it as 'Invar' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="In" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3325">In member 'UPnPService.InvokeSync(string, UPnPArgument[])', correct the casing of 'In' in parameter name 'InVarArr' by changing it to 'in'.</Issue>
            </Message>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3325">In member 'UPnPService.InvokeSync(string, UPnPArgument[])', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
            <Message Id="Arr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3325">In method 'UPnPService.InvokeSync(string, UPnPArgument[])', correct the spelling of 'Arr' in parameter name 'InVarArr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3335">In externally visible method 'UPnPService.InvokeSync(string, UPnPArgument[])', validate parameter 'InVarArr' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LocalMethodList" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UPnPService.LocalMethodList' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Major" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.Major' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Minor" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.Minor' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParentDevice" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.ParentDevice' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parse(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2281">In method 'UPnPService.Parse(string, int)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseActionXml(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2862">In method 'UPnPService.ParseActionXml(string, int)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseErrorBody(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4318">In method 'UPnPService.ParseErrorBody(string, int)', call System.IDisposable.Dispose on object 'sr' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4317">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPService.ParseErrorBody(string, int)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4365">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.ParseErrorBody(string, int)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseEvents(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4043">In method 'UPnPService.ParseEvents(string, int)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4078">Modify 'UPnPService.ParseEvents(string, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="TheEvents" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4045">'UPnPService.ParseEvents(string, int)' declares a variable, 'TheEvents', of type 'Hashtable', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseEventURL(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4119">Modify 'UPnPService.ParseEventURL(string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4102">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPService.ParseEventURL(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4116">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.ParseEventURL(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseSCPD(System.String,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2422">'UPnPService.ParseSCPD(string, int)' has a cyclomatic complexity of 34. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2433">In method 'UPnPService.ParseSCPD(string, int)', call System.IDisposable.Dispose on object 'MyString' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2468">In method 'UPnPService.ParseSCPD(string, int)', call System.IDisposable.Dispose on object 'fd' before all references to it are out of scope.</Issue>
            </Message>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2567">'UPnPService.ParseSCPD(string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2426">Replace the call to 'string.operator ==(string, string)' in 'UPnPService.ParseSCPD(string, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseStateVarXml(System.String,System.String,System.Xml.XmlTextReader,System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2593">'UPnPService.ParseStateVarXml(string, string, XmlTextReader, int)' has a cyclomatic complexity of 57. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2803">Modify 'UPnPService.ParseStateVarXml(string, string, XmlTextReader, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2816">Modify 'UPnPService.ParseStateVarXml(string, string, XmlTextReader, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2826">Modify 'UPnPService.ParseStateVarXml(string, string, XmlTextReader, int)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2757">Replace the call to 'string.operator ==(string, string)' in 'UPnPService.ParseStateVarXml(string, string, XmlTextReader, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2761">Replace the call to 'string.operator ==(string, string)' in 'UPnPService.ParseStateVarXml(string, string, XmlTextReader, int)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveComplexType(OpenSource.UPnP.UPnPComplexType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1428">In method 'UPnPService.RemoveComplexType(UPnPComplexType)', consider providing a more meaningful name than parameter name 't'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1429">In externally visible method 'UPnPService.RemoveComplexType(UPnPComplexType)', validate parameter 't' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveIPv6Scope(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3032">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPService.RemoveIPv6Scope(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveMethod(OpenSource.UPnP.UPnPAction)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3739">In externally visible method 'UPnPService.RemoveMethod(UPnPAction)', validate parameter 'action' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveMethod(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3728">In member 'UPnPService.RemoveMethod(string)', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveStateVariable(OpenSource.UPnP.UPnPStateVariable)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3927">In externally visible method 'UPnPService.RemoveStateVariable(UPnPStateVariable)', validate parameter 'stateVariable' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Renew()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2185">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Renew()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2192">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Renew()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RenewSink(OpenSource.UPnP.HTTPRequest,OpenSource.UPnP.HTTPMessage,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2209">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.RenewSink(HTTPRequest, HTTPMessage, object)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SCPDFile" Kind="Property" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get_SCPDFile()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
             <Messages>
              <Message Id="System.String.LastIndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1792">Because the behavior of 'string.LastIndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.SCPDFile.get()' with a call to 'string.LastIndexOf(string, StringComparison)'. If the result of 'string.LastIndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#SendEvents(OpenSource.UPnP.UPnPStateVariable)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4174">Modify 'UPnPService.SendEvents(UPnPStateVariable)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4159">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.SendEvents(UPnPStateVariable)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4160">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.SendEvents(UPnPStateVariable)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="4162">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.SendEvents(UPnPStateVariable)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SerializeObjectInstance(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3376">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.SerializeObjectInstance(object)' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ServiceID" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ID" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberAbbreviation" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1728">Correct the casing of 'ID' in member name 'UPnPService.ServiceID' by changing it to 'Id'. 'Id' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_ServiceID(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1733">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UPnPService.ServiceID.set(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1733">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.ServiceID.set(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1733">In externally visible method 'UPnPService.ServiceID.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ServiceURN" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="URN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1663">Correct the casing of 'URN' in member name 'UPnPService.ServiceURN' by changing it to 'Urn'.</Issue>
            </Message>
            <Message TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1663">Change the type of property 'UPnPService.ServiceURN' from string to System.Uri.</Issue>
            </Message>
           </Messages>
           <Accessors>
            <Accessor Name="#set_ServiceURN(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1668">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UPnPService.ServiceURN.set(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1670">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'UPnPService.ServiceURN.set(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
              <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1668">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.ServiceURN.set(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
               <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1670">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.ServiceURN.set(string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
              </Message>
              <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
               <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1668">In externally visible method 'UPnPService.ServiceURN.set(string)', validate parameter 'value' before using it.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ServiceURN_Prefix" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="URN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1713">Correct the casing of 'URN' in member name 'UPnPService.ServiceURN_Prefix' by changing it to 'Urn'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1713">Remove the underscores from member name 'UPnPService.ServiceURN_Prefix'.</Issue>
            </Message>
            <Message TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1713">Change the type of property 'UPnPService.ServiceURN_Prefix' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetStateVariable(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3865">'UPnPService.SetStateVariable(string, object)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3857">In member 'UPnPService.SetStateVariable(string, object)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3857">In member 'UPnPService.SetStateVariable(string, object)', correct the casing of 'Var' in parameter name 'VarValue' by changing it to 'var'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3865">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'UPnPService.SetStateVariable(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetVersion(System.String)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2267">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.SetVersion(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2276">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.SetVersion(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2248">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'UPnPService.SetVersion(string)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2261">Replace the call to 'string.operator ==(string, string)' in 'UPnPService.SetVersion(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2270">Replace the call to 'string.operator ==(string, string)' in 'UPnPService.SetVersion(string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StandardService" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'UPnPService.StandardService' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Subscribe(System.Int32,OpenSource.UPnP.UPnPService+UPnPEventSubscribeHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CB" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2009">In member 'UPnPService.Subscribe(int, UPnPService.UPnPEventSubscribeHandler)', correct the casing of 'CB' in parameter name 'CB' by changing it to 'cb'.</Issue>
            </Message>
            <Message Id="Timeout" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2009">In member 'UPnPService.Subscribe(int, UPnPService.UPnPEventSubscribeHandler)', correct the casing of 'Timeout' in parameter name 'Timeout' by changing it to 'timeout'.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2044">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Subscribe(int, UPnPService.UPnPEventSubscribeHandler)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2055">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Subscribe(int, UPnPService.UPnPEventSubscribeHandler)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2059">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Subscribe(int, UPnPService.UPnPEventSubscribeHandler)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnSubscribe(OpenSource.UPnP.UPnPService+UPnPEventHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnSubscribe" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2126">The compound word 'UnSubscribe' in member name 'UPnPService.UnSubscribe(UPnPService.UPnPEventHandler)' exists as a discrete term. If your usage is intended to be single word, case it as 'Unsubscribe' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2126">Correct the casing of 'Un' in member name 'UPnPService.UnSubscribe(UPnPService.UPnPEventHandler)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="cb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2126">In method 'UPnPService.UnSubscribe(UPnPService.UPnPEventHandler)', correct the spelling of 'cb' in parameter name 'cb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="2160">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.UnSubscribe(UPnPService.UPnPEventHandler)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#User" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.User' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#User2" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.User2' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Version" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Version()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3022">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Version.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3026">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Version.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
               <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="3026">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'UPnPService.Version.get()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#OnInvokeError" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPService.UPnPServiceInvokeErrorHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPService.UPnPServiceInvokeErrorHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'UPnPService.UPnPServiceInvokeErrorHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPService.UPnPServiceInvokeErrorHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnInvokeResponse" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPService.UPnPServiceInvokeHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPService.UPnPServiceInvokeHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'UPnPService.UPnPServiceInvokeHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPService.UPnPServiceInvokeHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnPeriodicRenewFailed" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1474">Declare the first parameter of 'UPnPService.PeriodicRenewFailedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1474">Declare the second parameter of 'UPnPService.PeriodicRenewFailedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1474">Rename 'UPnPService.PeriodicRenewFailedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnServiceReset" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPService.ServiceResetHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPService.ServiceResetHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPService.ServiceResetHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSubscribe" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPService.UPnPEventSubscribeHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPService.UPnPEventSubscribeHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPService.UPnPEventSubscribeHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSubscriptionAdded" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1489">Declare the first parameter of 'UPnPService.OnSubscriptionHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1489">Declare the second parameter of 'UPnPService.OnSubscriptionHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1489">Rename 'UPnPService.OnSubscriptionHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSubscriptionRemoved" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1500">Declare the first parameter of 'UPnPService.OnSubscriptionHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1500">Declare the second parameter of 'UPnPService.OnSubscriptionHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="1500">Rename 'UPnPService.OnSubscriptionHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnUPnPEvent" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPService.UPnPEventHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPService.UPnPEventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Pn' in member name 'UPnPService.OnUPnPEvent' by changing it to 'PN'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in member name 'UPnPService.OnUPnPEvent' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPService+AsyncInvokeInfo" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.AsyncInvokeInfo'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'UPnPService.AsyncInvokeInfo' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'UPnPService.AsyncInvokeInfo' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Args" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.AsyncInvokeInfo.Args' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ErrorCB" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.AsyncInvokeInfo.ErrorCB' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeCB" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.AsyncInvokeInfo.InvokeCB' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MethodName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.AsyncInvokeInfo.MethodName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Packet" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.AsyncInvokeInfo.Packet' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Tag" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPService.AsyncInvokeInfo.Tag' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPService+OnSubscriptionHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.OnSubscriptionHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPService+PeriodicRenewFailedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.PeriodicRenewFailedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPService+ServiceResetHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.ServiceResetHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPService+UPnPEventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPService.UPnPEventHandler' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="SEQ" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPEventHandler', correct the casing of 'SEQ' in parameter name 'SEQ' by changing it to 'seq'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPService.UPnPEventHandler'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.UPnPEventHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPService+UPnPEventSubscribeHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="OK" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameterAbbreviation" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPEventSubscribeHandler', correct the casing of 'OK' in parameter name 'SubscribeOK' by changing it to 'Ok'. 'Ok' is an abbreviation and therefore is not subject to acronym casing guidelines.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPService.UPnPEventSubscribeHandler' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Subscribe" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPEventSubscribeHandler', correct the casing of 'Subscribe' in parameter name 'SubscribeOK' by changing it to 'subscribe'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPService.UPnPEventSubscribeHandler'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.UPnPEventSubscribeHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPService+UPnPServiceInvokeErrorHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Args" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPServiceInvokeErrorHandler', correct the casing of 'Args' in parameter name 'Args' by changing it to 'args'.</Issue>
          </Message>
          <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPServiceInvokeErrorHandler', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPService.UPnPServiceInvokeErrorHandler' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPServiceInvokeErrorHandler', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPService.UPnPServiceInvokeErrorHandler'.</Issue>
          </Message>
          <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In delegate 'UPnPService.UPnPServiceInvokeErrorHandler', consider providing a more meaningful name than parameter name 'e'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.UPnPServiceInvokeErrorHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPService+UPnPServiceInvokeHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Args" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPServiceInvokeHandler', correct the casing of 'Args' in parameter name 'Args' by changing it to 'args'.</Issue>
          </Message>
          <Message Id="Method" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPServiceInvokeHandler', correct the casing of 'Method' in parameter name 'MethodName' by changing it to 'method'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPService.UPnPServiceInvokeHandler' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Return" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPServiceInvokeHandler', correct the casing of 'Return' in parameter name 'ReturnValue' by changing it to 'return'.</Issue>
          </Message>
          <Message Id="Tag" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPService.UPnPServiceInvokeHandler', correct the casing of 'Tag' in parameter name 'Tag' by changing it to 'tag'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPService.UPnPServiceInvokeHandler'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPService.UPnPServiceInvokeHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPServiceWatcher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPServiceWatcher' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPServiceWatcher'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OpenSource.UPnP.UPnPService,OpenSource.UPnP.UPnPServiceWatcher+SniffHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="S" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="48">In member 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler)', correct the casing of 'S' in parameter name 'S' by changing it to 's'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="48">In method 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler)', consider providing a more meaningful name than parameter name 'S'.</Issue>
            </Message>
            <Message Id="cb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="48">In method 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler)', correct the spelling of 'cb' in parameter name 'cb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OpenSource.UPnP.UPnPService,OpenSource.UPnP.UPnPServiceWatcher+SniffHandler,OpenSource.UPnP.UPnPServiceWatcher+SniffPacketHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="S" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="51">In member 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler, UPnPServiceWatcher.SniffPacketHandler)', correct the casing of 'S' in parameter name 'S' by changing it to 's'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="51">In method 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler, UPnPServiceWatcher.SniffPacketHandler)', consider providing a more meaningful name than parameter name 'S'.</Issue>
            </Message>
            <Message Id="cb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="51">In method 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler, UPnPServiceWatcher.SniffPacketHandler)', correct the spelling of 'cb' in parameter name 'cb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="pcb" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="51">In method 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler, UPnPServiceWatcher.SniffPacketHandler)', correct the spelling of 'pcb' in parameter name 'pcb' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="57">In externally visible method 'UPnPServiceWatcher.UPnPServiceWatcher(UPnPService, UPnPServiceWatcher.SniffHandler, UPnPServiceWatcher.SniffPacketHandler)', validate parameter 'S' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SniffPacketSink(OpenSource.UPnP.UPnPService,OpenSource.UPnP.HTTPMessage)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="MSG" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPServiceWatcher.cs" Line="66">In member 'UPnPServiceWatcher.SniffPacketSink(UPnPService, HTTPMessage)', correct the casing of 'MSG' in parameter name 'MSG' by changing it to 'msg'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniff" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPServiceWatcher.SniffHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPServiceWatcher.SniffHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'UPnPServiceWatcher.SniffHandler'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPServiceWatcher.SniffHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSniffPacket" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPServiceWatcher.SniffPacketHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPServiceWatcher.SniffPacketHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPServiceWatcher.SniffPacketHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPServiceWatcher+SniffHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPServiceWatcher.SniffHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPServiceWatcher+SniffPacketHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="MSG" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPServiceWatcher.SniffPacketHandler', correct the casing of 'MSG' in parameter name 'MSG' by changing it to 'msg'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPServiceWatcher.SniffPacketHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPSmartControlPoint" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPSmartControlPoint' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPSmartControlPoint'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(OpenSource.UPnP.UPnPSmartControlPoint+DeviceHandler)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="On" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="87">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler)', correct the casing of 'On' in parameter name 'OnAddedDeviceSink' by changing it to 'on'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OpenSource.UPnP.UPnPSmartControlPoint+DeviceHandler,OpenSource.UPnP.UPnPSmartControlPoint+ServiceHandler,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Device" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="162">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string)', correct the casing of 'Device' in parameter name 'DevicePartialMatchFilter' by changing it to 'device'.</Issue>
            </Message>
            <Message Id="On" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="162">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string)', correct the casing of 'On' in parameter name 'OnAddedDeviceSink' by changing it to 'on'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="162">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string)', correct the casing of 'On' in parameter name 'OnAddedServiceSink' by changing it to 'on'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OpenSource.UPnP.UPnPSmartControlPoint+DeviceHandler,OpenSource.UPnP.UPnPSmartControlPoint+ServiceHandler,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="127">Modify 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string[])' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Filters" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="34">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string[])', correct the casing of 'Filters' in parameter name 'Filters' by changing it to 'filters'.</Issue>
            </Message>
            <Message Id="On" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="34">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string[])', correct the casing of 'On' in parameter name 'OnAddedDeviceSink' by changing it to 'on'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="34">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string[])', correct the casing of 'On' in parameter name 'OnAddedServiceSink' by changing it to 'on'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="116">In externally visible method 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, UPnPSmartControlPoint.ServiceHandler, string[])', validate parameter 'Filters' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(OpenSource.UPnP.UPnPSmartControlPoint+DeviceHandler,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Device" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="98">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, string)', correct the casing of 'Device' in parameter name 'DevicePartialMatchFilter' by changing it to 'device'.</Issue>
            </Message>
            <Message Id="On" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="98">In member 'UPnPSmartControlPoint.UPnPSmartControlPoint(UPnPSmartControlPoint.DeviceHandler, string)', correct the casing of 'On' in parameter name 'OnAddedDeviceSink' by changing it to 'on'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CheckDeviceAgainstFilter(System.String,System.Double,OpenSource.UPnP.UPnPDevice,System.Object[]&amp;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Double.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="576">Because the behavior of 'double.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPSmartControlPoint.CheckDeviceAgainstFilter(string, double, UPnPDevice, out object[])' with a call to 'double.Parse(string, IFormatProvider)'. If the result of 'double.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="586">Because the behavior of 'double.Parse(string)' could vary based on the current user's locale settings, replace this call in 'UPnPSmartControlPoint.CheckDeviceAgainstFilter(string, double, UPnPDevice, out object[])' with a call to 'double.Parse(string, IFormatProvider)'. If the result of 'double.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForceDeviceAddition(System.Uri)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="607">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPSmartControlPoint.ForceDeviceAddition(Uri)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForceDisposeDevice(OpenSource.UPnP.UPnPDevice)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="65">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPSmartControlPoint.ForceDisposeDevice(UPnPDevice)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleAddedDevice(OpenSource.UPnP.UPnPInternalSmartControlPoint,OpenSource.UPnP.UPnPDevice)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="268">'UPnPSmartControlPoint.HandleAddedDevice(UPnPInternalSmartControlPoint, UPnPDevice)' has a cyclomatic complexity of 29. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="298">'x', a variable, is cast to type 'UPnPDevice' multiple times in method 'UPnPSmartControlPoint.HandleAddedDevice(UPnPInternalSmartControlPoint, UPnPDevice)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="311">'x', a variable, is cast to type 'UPnPService' multiple times in method 'UPnPSmartControlPoint.HandleAddedDevice(UPnPInternalSmartControlPoint, UPnPDevice)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="318">'x', a variable, is cast to type 'UPnPService' multiple times in method 'UPnPSmartControlPoint.HandleAddedDevice(UPnPInternalSmartControlPoint, UPnPDevice)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleRemovedDevice(OpenSource.UPnP.UPnPInternalSmartControlPoint,OpenSource.UPnP.UPnPDevice)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="403">'UPnPSmartControlPoint.HandleRemovedDevice(UPnPInternalSmartControlPoint, UPnPDevice)' has a cyclomatic complexity of 30. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="433">'x', a variable, is cast to type 'UPnPDevice' multiple times in method 'UPnPSmartControlPoint.HandleRemovedDevice(UPnPInternalSmartControlPoint, UPnPDevice)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="444">'x', a variable, is cast to type 'UPnPDevice' multiple times in method 'UPnPSmartControlPoint.HandleRemovedDevice(UPnPInternalSmartControlPoint, UPnPDevice)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Rescan()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="172">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPSmartControlPoint.Rescan()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnicastSearch(System.Net.IPAddress)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Remote" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="177">In member 'UPnPSmartControlPoint.UnicastSearch(IPAddress)', correct the casing of 'Remote' in parameter name 'RemoteAddress' by changing it to 'remote'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPSmartControlPoint.cs" Line="177">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPSmartControlPoint.UnicastSearch(IPAddress)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnAddedDevice" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPSmartControlPoint.DeviceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPSmartControlPoint.DeviceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPSmartControlPoint.DeviceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnAddedService" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPSmartControlPoint.ServiceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPSmartControlPoint.ServiceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPSmartControlPoint.ServiceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnRemovedDevice" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPSmartControlPoint.DeviceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPSmartControlPoint.DeviceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPSmartControlPoint.DeviceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnRemovedService" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPSmartControlPoint.ServiceHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPSmartControlPoint.ServiceHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPSmartControlPoint.ServiceHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPSmartControlPoint+DeviceHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPSmartControlPoint.DeviceHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPSmartControlPoint+ServiceHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPSmartControlPoint.ServiceHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPStateVariable" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPStateVariable' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPStateVariable'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,OpenSource.UPnP.UPnPComplexType)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="CT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, UPnPComplexType)', correct the casing of 'CT' in parameter name 'CT' by changing it to 'ct'.</Issue>
            </Message>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, UPnPComplexType)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="396">In member 'UPnPStateVariable.UPnPStateVariable(string, object)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="396">In member 'UPnPStateVariable.UPnPStateVariable(string, object)', correct the casing of 'Var' in parameter name 'VarValue' by changing it to 'var'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Object,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Allowed" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, object, string[])', correct the casing of 'Allowed' in parameter name 'AllowedValues' by changing it to 'allowed'.</Issue>
            </Message>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, object, string[])', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, object, string[])', correct the casing of 'Var' in parameter name 'VarValue' by changing it to 'var'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="453">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'UPnPStateVariable.UPnPStateVariable(string, object, string[])' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="450">In externally visible method 'UPnPStateVariable.UPnPStateVariable(string, object, string[])', validate parameter 'VarValue' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Type,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Send" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, Type, bool)', correct the casing of 'Send' in parameter name 'SendEvents' by changing it to 'send'.</Issue>
            </Message>
            <Message Id="V" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, Type, bool)', correct the casing of 'V' in parameter name 'VType' by changing it to 'v'.</Issue>
            </Message>
            <Message Id="Var" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In member 'UPnPStateVariable.UPnPStateVariable(string, Type, bool)', correct the casing of 'Var' in parameter name 'VarName' by changing it to 'var'.</Issue>
            </Message>
            <Message Id="V" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="214">In method 'UPnPStateVariable.UPnPStateVariable(string, Type, bool)', correct the spelling of 'V' in parameter name 'VType' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_ComplexType" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable._ComplexType' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddAssociation(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Action" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="781">In member 'UPnPStateVariable.AddAssociation(string, string)', correct the casing of 'Action' in parameter name 'ActionName' by changing it to 'action'.</Issue>
            </Message>
            <Message Id="Argument" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="781">In member 'UPnPStateVariable.AddAssociation(string, string)', correct the casing of 'Argument' in parameter name 'ArgumentName' by changing it to 'argument'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Allowed" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.Allowed' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AllowedStringValues" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="369">Change 'UPnPStateVariable.AllowedStringValues' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AssociationList" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.AssociationList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildProperty()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="763">'UPnPStateVariable.BuildProperty()' appears to have no upstream public or protected callers.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertFromUPnPType(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="623">Correct the casing of 'Pn' in member name 'UPnPStateVariable.ConvertFromUPnPType(string)' by changing it to 'PN'.</Issue>
            </Message>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="623">In member 'UPnPStateVariable.ConvertFromUPnPType(string)', correct the casing of 'The' in parameter name 'TheType' by changing it to 'the'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="623">Correct the spelling of 'Pn' in member name 'UPnPStateVariable.ConvertFromUPnPType(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertToUPnPType(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="690">Correct the casing of 'Pn' in member name 'UPnPStateVariable.ConvertToUPnPType(Type)' by changing it to 'PN'.</Issue>
            </Message>
            <Message Id="The" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="690">In member 'UPnPStateVariable.ConvertToUPnPType(Type)', correct the casing of 'The' in parameter name 'TheType' by changing it to 'the'.</Issue>
            </Message>
            <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="690">Correct the spelling of 'Pn' in member name 'UPnPStateVariable.ConvertToUPnPType(Type)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="693">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'UPnPStateVariable.ConvertToUPnPType(Type)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="692">In externally visible method 'UPnPStateVariable.ConvertToUPnPType(Type)', validate parameter 'TheType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DefValue" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.DefValue' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Def" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Def' in member name 'UPnPStateVariable.DefValue' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNetType()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="575">Change 'UPnPStateVariable.GetNetType()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeFromUnknown(System.String)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="588">Modify 'UPnPStateVariable.GetTypeFromUnknown(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="TooGeneric" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="614">'UPnPStateVariable.GetTypeFromUnknown(string)' creates an exception of type 'Exception', an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="Type" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="579">In member 'UPnPStateVariable.GetTypeFromUnknown(string)', correct the casing of 'Type' in parameter name 'TypeName' by changing it to 'type'.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="579">The 'this' parameter (or 'Me' in Visual Basic) of 'UPnPStateVariable.GetTypeFromUnknown(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MaxVal" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.MaxVal' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Val' in member name 'UPnPStateVariable.MaxVal' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MinVal" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.MinVal' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Val' in member name 'UPnPStateVariable.MinVal' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MulticastEvent" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.MulticastEvent' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveAssociation(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Action" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="794">In member 'UPnPStateVariable.RemoveAssociation(string, string)', correct the casing of 'Action' in parameter name 'ActionName' by changing it to 'action'.</Issue>
            </Message>
            <Message Id="Argument" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="794">In member 'UPnPStateVariable.RemoveAssociation(string, string)', correct the casing of 'Argument' in parameter name 'ArgumentName' by changing it to 'argument'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SendEvent" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.SendEvent' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetRange(System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Max" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="466">In member 'UPnPStateVariable.SetRange(object, object, object)', correct the casing of 'Max' in parameter name 'Max' by changing it to 'max'.</Issue>
            </Message>
            <Message Id="Min" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="466">In member 'UPnPStateVariable.SetRange(object, object, object)', correct the casing of 'Min' in parameter name 'Min' by changing it to 'min'.</Issue>
            </Message>
            <Message Id="Step" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="466">In member 'UPnPStateVariable.SetRange(object, object, object)', correct the casing of 'Step' in parameter name 'Step' by changing it to 'step'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StepVal" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.StepVal' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Val" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Val' in member name 'UPnPStateVariable.StepVal' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Validate(System.Object)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="560">'NewVal', a parameter, is cast to type 'IComparable' multiple times in method 'UPnPStateVariable.Validate(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VariableName" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.VariableName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnModified" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UPnPStateVariable.ModifiedHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UPnPStateVariable.ModifiedHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Rename 'UPnPStateVariable.ModifiedHandler' to end in 'EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPStateVariable+AssociationNode" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPStateVariable.AssociationNode'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'UPnPStateVariable.AssociationNode' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ActionName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.AssociationNode.ActionName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ArgName" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'UPnPStateVariable.AssociationNode.ArgName' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="337">Because 'UPnPStateVariable.AssociationNode' is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="337">In member 'UPnPStateVariable.AssociationNode.Equals(object)', change parameter name 'j' to 'obj' in order to match the identifier as it has been declared in 'ValueType.Equals(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPStateVariable+CannotRemoveException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPStateVariable.CannotRemoveException': protected CannotRemoveException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPStateVariable.CannotRemoveException': public CannotRemoveException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPStateVariable.CannotRemoveException': public CannotRemoveException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UPnPStateVariable.CannotRemoveException' as this type implements ISerializable.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPStateVariable.CannotRemoveException'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="239">In method 'UPnPStateVariable.CannotRemoveException.CannotRemoveException(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPStateVariable+ModifiedHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="New" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'UPnPStateVariable.ModifiedHandler', correct the casing of 'New' in parameter name 'NewValue' by changing it to 'new'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPStateVariable.ModifiedHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="UPnPStateVariable+OutOfRangeException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPStateVariable.OutOfRangeException': protected OutOfRangeException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPStateVariable.OutOfRangeException': public OutOfRangeException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPStateVariable.OutOfRangeException': public OutOfRangeException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UPnPStateVariable.OutOfRangeException' as this type implements ISerializable.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'UPnPStateVariable.OutOfRangeException'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="250">In method 'UPnPStateVariable.OutOfRangeException.OutOfRangeException(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPStringFormatter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPStringFormatter' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPStringFormatter'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'UPnPStringFormatter' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#EscapeString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="In" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="41">In member 'UPnPStringFormatter.EscapeString(string)', correct the casing of 'In' in parameter name 'InString' by changing it to 'in'.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="41">In member 'UPnPStringFormatter.EscapeString(string)', consider replacing the data type identifier 'String' in parameter name 'InString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="42">In externally visible method 'UPnPStringFormatter.EscapeString(string)', validate parameter 'InString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetURNPrefix(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="URN" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="27">Correct the casing of 'URN' in member name 'UPnPStringFormatter.GetURNPrefix(string)' by changing it to 'Urn'.</Issue>
            </Message>
            <Message Id="0#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="27">Change the type of parameter 'urn' of method 'UPnPStringFormatter.GetURNPrefix(string)' from string to System.Uri, or provide an overload of 'UPnPStringFormatter.GetURNPrefix(string)', that allows 'urn' to be passed as a System.Uri object.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="27">Change the return type of 'UPnPStringFormatter.GetURNPrefix(string)' from string to System.Uri.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="33">In externally visible method 'UPnPStringFormatter.GetURNPrefix(string)', validate parameter 'urn' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PartialEscapeString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="In" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="50">In member 'UPnPStringFormatter.PartialEscapeString(string)', correct the casing of 'In' in parameter name 'InString' by changing it to 'in'.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="50">In member 'UPnPStringFormatter.PartialEscapeString(string)', consider replacing the data type identifier 'String' in parameter name 'InString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="51">In externally visible method 'UPnPStringFormatter.PartialEscapeString(string)', validate parameter 'InString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnEscapeString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnEscape" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="61">The compound word 'UnEscape' in member name 'UPnPStringFormatter.UnEscapeString(string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Unescape' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="In" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="61">In member 'UPnPStringFormatter.UnEscapeString(string)', correct the casing of 'In' in parameter name 'InString' by changing it to 'in'.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="61">Correct the casing of 'Un' in member name 'UPnPStringFormatter.UnEscapeString(string)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="61">In member 'UPnPStringFormatter.UnEscapeString(string)', consider replacing the data type identifier 'String' in parameter name 'InString' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPStringFormatter.cs" Line="62">In externally visible method 'UPnPStringFormatter.UnEscapeString(string)', validate parameter 'InString' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UPnPTypeMismatchException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Pn" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Pn' in type name 'UPnPTypeMismatchException' by changing it to 'PN'.</Issue>
          </Message>
          <Message Id="Pn" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Pn' in type name 'UPnPTypeMismatchException'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPTypeMismatchException': protected UPnPTypeMismatchException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPTypeMismatchException': public UPnPTypeMismatchException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'UPnPTypeMismatchException': public UPnPTypeMismatchException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'UPnPTypeMismatchException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="125">In method 'UPnPTypeMismatchException.UPnPTypeMismatchException(string)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Utils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Utils" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Utils' in type name 'Utils'.</Issue>
          </Message>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'Utils' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetMulticastAddr(System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="18">Correct the spelling of 'Addr' in member name 'Utils.GetMulticastAddr(IPAddress)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="18">In method 'Utils.GetMulticastAddr(IPAddress)', correct the spelling of 'addr' in parameter name 'addr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="19">In externally visible method 'Utils.GetMulticastAddr(IPAddress)', validate parameter 'addr' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMulticastAddrBraket(System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="25">Correct the spelling of 'Addr' in member name 'Utils.GetMulticastAddrBraket(IPAddress)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Braket" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="25">Correct the spelling of 'Braket' in member name 'Utils.GetMulticastAddrBraket(IPAddress)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="25">In method 'Utils.GetMulticastAddrBraket(IPAddress)', correct the spelling of 'addr' in parameter name 'addr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="26">In externally visible method 'Utils.GetMulticastAddrBraket(IPAddress)', validate parameter 'addr' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMulticastAddrBraketPort(System.Net.IPAddress)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="32">Correct the spelling of 'Addr' in member name 'Utils.GetMulticastAddrBraketPort(IPAddress)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Braket" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="32">Correct the spelling of 'Braket' in member name 'Utils.GetMulticastAddrBraketPort(IPAddress)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="32">In method 'Utils.GetMulticastAddrBraketPort(IPAddress)', correct the spelling of 'addr' in parameter name 'addr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="Utils.cs" Line="33">In externally visible method 'Utils.GetMulticastAddrBraketPort(IPAddress)', validate parameter 'addr' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpnpMulticastV4Addr" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Addr' in member name 'Utils.UpnpMulticastV4Addr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Upnp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Upnp' in member name 'Utils.UpnpMulticastV4Addr' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Utils.UpnpMulticastV4Addr' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpnpMulticastV4EndPoint" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Upnp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Upnp' in member name 'Utils.UpnpMulticastV4EndPoint' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Utils.UpnpMulticastV4EndPoint' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpnpMulticastV6Addr1" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Addr' in member name 'Utils.UpnpMulticastV6Addr1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Upnp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Upnp' in member name 'Utils.UpnpMulticastV6Addr1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Utils.UpnpMulticastV6Addr1' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpnpMulticastV6Addr2" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Addr" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Addr' in member name 'Utils.UpnpMulticastV6Addr2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Upnp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Upnp' in member name 'Utils.UpnpMulticastV6Addr2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Utils.UpnpMulticastV6Addr2' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpnpMulticastV6EndPoint1" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Upnp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Upnp' in member name 'Utils.UpnpMulticastV6EndPoint1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Utils.UpnpMulticastV6EndPoint1' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpnpMulticastV6EndPoint2" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Upnp" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Upnp' in member name 'Utils.UpnpMulticastV6EndPoint2' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'Utils.UpnpMulticastV6EndPoint2' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XMLParsingException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="XML" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'XML' in type name 'XMLParsingException' by changing it to 'Xml'.</Issue>
          </Message>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XMLParsingException': protected XMLParsingException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XMLParsingException': public XMLParsingException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XMLParsingException': public XMLParsingException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'XMLParsingException': public XMLParsingException(String, Exception).</Issue>
          </Message>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'XMLParsingException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.String,System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="90">In method 'XMLParsingException.XMLParsingException(string, int, int)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="90">In method 'XMLParsingException.XMLParsingException(string, int, int)', correct the spelling of 'pos' in parameter name 'pos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="ln-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="93">Correct the potential overflow in the operation 'ln-1' in 'XMLParsingException.XMLParsingException(string, int, int)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.Int32,System.Int32,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="msg" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="97">In method 'XMLParsingException.XMLParsingException(string, int, int, Exception)', correct the spelling of 'msg' in parameter name 'msg' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="pos" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="97">In method 'XMLParsingException.XMLParsingException(string, int, int, Exception)', correct the spelling of 'pos' in parameter name 'pos' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="ln-1" TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="100">Correct the potential overflow in the operation 'ln-1' in 'XMLParsingException.XMLParsingException(string, int, int, Exception)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#line" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XMLParsingException.line' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#position" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'XMLParsingException.position' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="106">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'XMLParsingException.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="UPnPService.cs" Line="106">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'XMLParsingException.ToString()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="OpenSource.Utilities">
       <Types>
        <Type Name="EventLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'EventLogger' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Enabled" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'EventLogger.Enabled' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#g_logName" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'EventLogger.g_logName' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#g_productVersion" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'EventLogger.g_productVersion' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#g_sourceName" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'EventLogger.g_sourceName' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.Exception,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="196">In method 'EventLogger.Log(Exception, string)', call System.IDisposable.Dispose on object 'ef' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="186">Method 'EventLogger.Log(Exception, string)' passes a literal string as parameter 'message' of a call to 'EventLog.WriteEntry(string, EventLogEntryType)'. Retrieve the following string(s) from a resource table instead: " threw exception: ".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="188">Modify 'EventLogger.Log(Exception, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="204">Modify 'EventLogger.Log(Exception, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="174">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'EventLogger.Log(Exception, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="164">In externally visible method 'EventLogger.Log(Exception, string)', validate parameter 'exception' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Log(System.Object,System.Diagnostics.EventLogEntryType,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="140">Method 'EventLogger.Log(object, EventLogEntryType, string)' passes a literal string as parameter 'message' of a call to 'EventLog.WriteEntry(string, EventLogEntryType)'. Retrieve the following string(s) from a resource table instead: ": ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="128">Method 'EventLogger.Log(object, EventLogEntryType, string)' passes a literal string as parameter 'message' of a call to 'EventLog.WriteEntry(string, EventLogEntryType)'. Retrieve the following string(s) from a resource table instead: ": , \r\n\r\nTRACE:\r\n".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="130">Modify 'EventLogger.Log(object, EventLogEntryType, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="142">Modify 'EventLogger.Log(object, EventLogEntryType, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Log" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="102">In member 'EventLogger.Log(object, EventLogEntryType, string)', correct the casing of 'Log' in parameter name 'LogType' by changing it to 'log'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetLog(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="59">Modify 'EventLogger.SetLog(string, string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetOnExceptionAction(System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SetOn" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="72">The compound word 'SetOn' in member name 'EventLogger.SetOnExceptionAction(bool)' exists as a discrete term. If your usage is intended to be single word, case it as 'Seton' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowAll" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'EventLogger.ShowAll' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StopLog()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="EventLogger.cs" Line="90">Modify 'EventLogger.StopLog()' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnEvent" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'EventLogger.EventHandler' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'EventLogger.EventHandler' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'EventLogger.EventHandler'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventLogger+EventHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Log" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'EventLogger.EventHandler', correct the casing of 'Log' in parameter name 'LogMessage' by changing it to 'log'.</Issue>
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'EventLogger.EventHandler', correct the casing of 'Log' in parameter name 'LogType' by changing it to 'log'.</Issue>
          </Message>
          <Message Id="Stack" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="DelegateParameter" Certainty="85" Level="Error">In delegate 'EventLogger.EventHandler', correct the casing of 'Stack' in parameter name 'StackTrace' by changing it to 'stack'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'EventLogger.EventHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ExceptionForm" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="ExceptionForm.cs" Line="99">Method 'ExceptionForm.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Break".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="ExceptionForm.cs" Line="123">Method 'ExceptionForm.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "ExceptionForm".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="ExceptionForm.cs" Line="108">Method 'ExceptionForm.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Ignore".</Issue>
            </Message>
            <Message Id="ExceptionForm" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="ExceptionForm.cs" Line="123">Correct the spelling of the unrecognized token 'ExceptionForm' in the literal '"ExceptionForm"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstanceTracker" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="685">In method 'InstanceTracker.Add(object)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="713">In externally visible method 'InstanceTracker.Add(object)', validate parameter 'o' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DetailMenuItem_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="909">In method 'InstanceTracker.DetailMenuItem_Click(object, EventArgs)', object 'it2' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'it2' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="916">Method 'InstanceTracker.DetailMenuItem_Click(object, EventArgs)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(string)'. Retrieve the following string(s) from a resource table instead: "No details for this item".</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="916">Change 'InstanceTracker.DetailMenuItem_Click(object, EventArgs)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Enabled" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'InstanceTracker.Enabled' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#fullGcMenuItem_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="893">Method 'InstanceTracker.fullGcMenuItem_Click(object, EventArgs)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Memory: ".</Issue>
            </Message>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="893">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'InstanceTracker.fullGcMenuItem_Click(object, EventArgs)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#gcMenuItem_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.GC.Collect" TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="System.GC.Collect" Certainty="75" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="820">Remove the call to GC.Collect from 'InstanceTracker.gcMenuItem_Click(object, EventArgs)'. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GenerateExceptionFile(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1000">In member 'InstanceTracker.GenerateExceptionFile(string, string, string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1003">In method 'InstanceTracker.GenerateExceptionFile(string, string, string)', call System.IDisposable.Dispose on object 'fs' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Method 'InstanceTracker.GenerateExceptionFile(string, string, string)' passes a literal string as parameter 'caption' of a call to 'MessageBox.Show(string, string, MessageBoxButtons, MessageBoxIcon)'. Retrieve the following string(s) from a resource table instead: "Application Exception".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Method 'InstanceTracker.GenerateExceptionFile(string, string, string)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(string, string, MessageBoxButtons, MessageBoxIcon)'. Retrieve the following string(s) from a resource table instead: "Exception error logged in: , \r\n\r\n, Please e-mail these exceptions to Ylian S...".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1014">Modify 'InstanceTracker.GenerateExceptionFile(string, string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Saint-Hilaire" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Correct the spelling of the unrecognized token 'Saint-Hilaire' in the literal '"Please e-mail these exceptions to Ylian Saint-Hilaire, ylian.saint-hilaire@intel..."'.</Issue>
            </Message>
            <Message Id="Ylian" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Correct the spelling of the unrecognized token 'Ylian' in the literal '"Please e-mail these exceptions to Ylian Saint-Hilaire, ylian.saint-hilaire@intel..."'.</Issue>
            </Message>
            <Message Id="saint-hilaire" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Correct the spelling of the unrecognized token 'saint-hilaire' in the literal '"Please e-mail these exceptions to Ylian Saint-Hilaire, ylian.saint-hilaire@intel..."'.</Issue>
            </Message>
            <Message Id="ylian" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Correct the spelling of the unrecognized token 'ylian' in the literal '"Please e-mail these exceptions to Ylian Saint-Hilaire, ylian.saint-hilaire@intel..."'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'InstanceTracker.GenerateExceptionFile(string, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="1012">Change 'InstanceTracker.GenerateExceptionFile(string, string, string)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleTracker(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="731">Method 'InstanceTracker.HandleTracker(object)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Add: ".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.ColumnHeader.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="550">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ColumnHeader.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Count".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="507">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ColumnHeader.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Message".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="555">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ColumnHeader.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Object".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="502">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ColumnHeader.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Origin".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="666">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Debug Information".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="453">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Events".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="527">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Instances".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.FileDialog.set_Filter(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="652">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'FileDialog.Filter.set(string)'. Retrieve the following string(s) from a resource table instead: "Log Files|*.log".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.FileDialog.set_Title(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="653">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'FileDialog.Title.set(string)'. Retrieve the following string(s) from a resource table instead: "Save Debug Information Log".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.MenuItem.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="429">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&amp;Clear Event Log".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="369">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&amp;Close".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="358">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&amp;Enable Object Tracking".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="325">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&amp;File".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="347">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&amp;Full Garbage Collect".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="341">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&amp;Garbage Collect".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="418">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&amp;Halt On Exceptions".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="336">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="353">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="364">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="413">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="424">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="297">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Details".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="384">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Events".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="330">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Save As...".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="407">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Show &amp;Audit Messages".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="389">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Show &amp;Exception Messages".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="401">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Show &amp;Information Messages".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="395">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'MenuItem.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Show &amp;Warning Messages".</Issue>
            </Message>
            <Message Id="System.Windows.Forms.ToolBarButton.set_ToolTipText(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="634">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ToolBarButton.ToolTipText.set(string)'. Retrieve the following string(s) from a resource table instead: "Clear Event Log".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="646">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ToolBarButton.ToolTipText.set(string)'. Retrieve the following string(s) from a resource table instead: "Force Garbage Collection".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="623">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ToolBarButton.ToolTipText.set(string)'. Retrieve the following string(s) from a resource table instead: "Show Audit Messages".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="602">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ToolBarButton.ToolTipText.set(string)'. Retrieve the following string(s) from a resource table instead: "Show Exception Messages".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="616">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ToolBarButton.ToolTipText.set(string)'. Retrieve the following string(s) from a resource table instead: "Show Information Messages".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="609">Method 'InstanceTracker.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'ToolBarButton.ToolTipText.set(string)'. Retrieve the following string(s) from a resource table instead: "Show Warnings Messages".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnEventSinkEx(System.Diagnostics.EventLogEntryType,System.Object,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="196">'origin', a parameter, is cast to type 'string' multiple times in method 'InstanceTracker.OnEventSinkEx(EventLogEntryType, object, string, string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="211">'InstanceTracker.OnEventSinkEx(EventLogEntryType, object, string, string)' locks on a reference of type 'InstanceTracker'. Replace this with a lock against an object with strong-identity.</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="190">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'InstanceTracker.OnEventSinkEx(EventLogEntryType, object, string, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="200">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'InstanceTracker.OnEventSinkEx(EventLogEntryType, object, string, string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="202">Replace the call to 'string.operator !=(string, string)' in 'InstanceTracker.OnEventSinkEx(EventLogEntryType, object, string, string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Recalculate()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="853">The 'this' parameter (or 'Me' in Visual Basic) of 'InstanceTracker.Recalculate()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Recalculate(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="826">The 'this' parameter (or 'Me' in Visual Basic) of 'InstanceTracker.Recalculate(string)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="751">Method 'InstanceTracker.Remove(object)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Remove: ".</Issue>
            </Message>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="744">In method 'InstanceTracker.Remove(object)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="750">In externally visible method 'InstanceTracker.Remove(object)', validate parameter 'o' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#saveAsMenuItem_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="ExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="952">In method 'InstanceTracker.saveAsMenuItem_Click(object, EventArgs)', object 'file' is not disposed along all exception paths. Call System.IDisposable.Dispose on object 'file' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#StopTimer(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.MessageBox.Show(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="72">Method 'InstanceTracker.StopTimer(string)' passes a literal string as parameter 'text' of a call to 'MessageBox.Show(string)'. Retrieve the following string(s) from a resource table instead: "Time to execute: ,  = ".</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="71">In method 'InstanceTracker.StopTimer(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message Id="System.Double.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="72">Because the behavior of 'double.ToString()' could vary based on the current user's locale settings, replace this call in 'InstanceTracker.StopTimer(string)' with a call to 'double.ToString(IFormatProvider)'. If the result of 'double.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="72">Change 'InstanceTracker.StopTimer(string)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#VersionString" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'InstanceTracker.VersionString' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WeakTable" Kind="Field" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'InstanceTracker.WeakTable' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstanceTracker+InstanceStruct" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'InstanceTracker.InstanceStruct'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'InstanceTracker.InstanceStruct' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'InstanceTracker.InstanceStruct' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#StackList" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InstanceTracker.InstanceStruct.StackList' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WR" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'InstanceTracker.InstanceStruct.WR' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstanceTracker+InstanceTrackerSorter" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#Compare(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker.cs" Line="58">Because the behavior of 'string.CompareTo(string)' could vary based on the current user's locale settings, replace this call in 'InstanceTracker.InstanceTrackerSorter.Compare(object, object)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="InstanceTracker+TrackerHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="LanguageIndependentDelegateParameter" Certainty="75" Level="Error">In delegate 'InstanceTracker.TrackerHandler', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
          </Message>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'InstanceTracker.TrackerHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InstanceTracker+UpdateHandler" Kind="Delegate" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Do not nest type 'InstanceTracker.UpdateHandler'. Alternatively, change its accessibility so that it is not externally visible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="InstanceTracker2" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker2.cs" Line="124">Method 'InstanceTracker2.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "1 of 1".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker2.cs" Line="106">Method 'InstanceTracker2.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&lt;&lt;".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker2.cs" Line="115">Method 'InstanceTracker2.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "&gt;&gt;".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker2.cs" Line="138">Method 'InstanceTracker2.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "InstanceTracker2".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowStatus()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker2.cs" Line="56">Method 'InstanceTracker2.ShowStatus()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: " of ".</Issue>
            </Message>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker2.cs" Line="56">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'InstanceTracker2.ShowStatus()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="InstanceTracker2.cs" Line="56">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'InstanceTracker2.ShowStatus()' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringCompressor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'StringCompressor' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BestMatch(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32&amp;,System.Int32&amp;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="6#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">Consider a design that does not require that 'MatchOffset' be an out parameter.</Issue>
            </Message>
            <Message Id="7#" TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">Consider a design that does not require that 'MatchLength' be an out parameter.</Issue>
            </Message>
            <Message Id="Match" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">In member 'StringCompressor.BestMatch(byte[], int, int, int, int, int, out int, out int)', correct the casing of 'Match' in parameter name 'MatchLength' by changing it to 'match'.</Issue>
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">In member 'StringCompressor.BestMatch(byte[], int, int, int, int, int, out int, out int)', correct the casing of 'Match' in parameter name 'MatchOffset' by changing it to 'match'.</Issue>
            </Message>
            <Message Id="Max" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">In member 'StringCompressor.BestMatch(byte[], int, int, int, int, int, out int, out int)', correct the casing of 'Max' in parameter name 'MaxMatchSize' by changing it to 'max'.</Issue>
            </Message>
            <Message Id="Min" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">In member 'StringCompressor.BestMatch(byte[], int, int, int, int, int, out int, out int)', correct the casing of 'Min' in parameter name 'MinMatchSize' by changing it to 'min'.</Issue>
            </Message>
            <Message Id="Offset" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">In member 'StringCompressor.BestMatch(byte[], int, int, int, int, int, out int, out int)', correct the casing of 'Offset' in parameter name 'Offset' by changing it to 'offset'.</Issue>
            </Message>
            <Message Id="Window" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="76">In member 'StringCompressor.BestMatch(byte[], int, int, int, int, int, out int, out int)', correct the casing of 'Window' in parameter name 'WindowSize' by changing it to 'window'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompressString(System.Byte[],System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="153">In method 'StringCompressor.CompressString(byte[], int, int, int)', call System.IDisposable.Dispose on object 'buf' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="154">In method 'StringCompressor.CompressString(byte[], int, int, int)', call System.IDisposable.Dispose on object 'tmp' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="194">In method 'StringCompressor.CompressString(byte[], int, int, int)', call System.IDisposable.Dispose on object 'tmp' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="210">In method 'StringCompressor.CompressString(byte[], int, int, int)', call System.IDisposable.Dispose on object 'tmp' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="251">In method 'StringCompressor.CompressString(byte[], int, int, int)', call System.IDisposable.Dispose on object 'tmp' before all references to it are out of scope.</Issue>
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="266">In method 'StringCompressor.CompressString(byte[], int, int, int)', call System.IDisposable.Dispose on object 'tmp' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="wz" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="227">'StringCompressor.CompressString(byte[], int, int, int)' declares a variable, 'wz', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="zzz" TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="226">'StringCompressor.CompressString(byte[], int, int, int)' declares a variable, 'zzz', of type 'string', which is never used or is only assigned to. Use this variable or remove it.</Issue>
            </Message>
            <Message Id="inbufLength" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="152">Parameter 'inbufLength' of 'StringCompressor.CompressString(byte[], int, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="loop" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="152">Parameter 'loop' of 'StringCompressor.CompressString(byte[], int, int, int)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompressString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="141">In method 'StringCompressor.CompressString(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecompressString(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="StringCompresser.cs" Line="289">In method 'StringCompressor.DecompressString(byte[], int, int)', call System.IDisposable.Dispose on object 'OutBuf' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning">In externally visible method 'StringCompressor.DecompressString(byte[], int, int)', validate parameter 'buffer' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WeakEvent" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Fire()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="37">Consider making 'WeakEvent.Fire()' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="41">Consider making 'WeakEvent.Fire(object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="45">Consider making 'WeakEvent.Fire(object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="49">Consider making 'WeakEvent.Fire(object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="53">Consider making 'WeakEvent.Fire(object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="57">Consider making 'WeakEvent.Fire(object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="61">Consider making 'WeakEvent.Fire(object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="65">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="69">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="73">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="77">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="81">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="85">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="89">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="93">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="97">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="101">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="105">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="109">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="113">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="117">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="121">Consider making 'WeakEvent.Fire(object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object, object)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Fire(System.Object[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="142">Modify 'WeakEvent.Fire(object[])' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="127">Consider making 'WeakEvent.Fire(object[])' an event.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Register(System.Delegate)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="169">In externally visible method 'WeakEvent.Register(Delegate)', validate parameter 'handler' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Register(System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="162">In externally visible method 'WeakEvent.Register(object, string)', validate parameter 'applicant' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnRegister(System.Delegate)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnRegister" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="180">The compound word 'UnRegister' in member name 'WeakEvent.UnRegister(Delegate)' exists as a discrete term. If your usage is intended to be single word, case it as 'Unregister' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="180">Correct the casing of 'Un' in member name 'WeakEvent.UnRegister(Delegate)' by changing it to 'UN'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="181">In externally visible method 'WeakEvent.UnRegister(Delegate)', validate parameter 'handler' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnRegister(System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnRegister" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="184">The compound word 'UnRegister' in member name 'WeakEvent.UnRegister(object, string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Unregister' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="196">Modify 'WeakEvent.UnRegister(object, string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="184">Correct the casing of 'Un' in member name 'WeakEvent.UnRegister(object, string)' by changing it to 'UN'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UnRegisterAll()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UnRegister" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="173">The compound word 'UnRegister' in member name 'WeakEvent.UnRegisterAll()' exists as a discrete term. If your usage is intended to be single word, case it as 'Unregister' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="Un" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-06-05 07:05:20Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="d:\Verplaatste bibliotheken\Documents\GitHub\GigServer\UPnP" File="WeakEvent.cs" Line="173">Correct the casing of 'Un' in member name 'WeakEvent.UnRegisterAll()' by changing it to 'UN'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidCallingProblematicMethods" Category="Microsoft.Reliability" CheckId="CA2001">
   <Name>Avoid calling problematic methods</Name>
   <Description>Avoid making unnecessary and potentially dangerous method calls.</Description>
   <Resolution Name="System.GC.Collect">Remove the call to GC.Collect from {0}. It is usually unnecessary to force garbage collection, and doing so can severely degrade performance.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385973.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="reliabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveClassCoupling" Category="Microsoft.Maintainability" CheckId="CA1506">
   <Name>Avoid excessive class coupling</Name>
   <Description>Types and methods with a high degree of class coupling can be difficult to maintain.</Description>
   <Resolution Name="Type">{0} is coupled with {1} different types from {2} different namespaces. Rewrite or refactor this class's methods to decrease its class coupling, or consider moving some of the class's methods to some of the other types it is tightly coupled with. A class coupling above {3} indicates poor maintainability, a class coupling between {3} and {4} indicates moderate maintainability, and a class coupling below {4} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb397994.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidOutParameters" Category="Microsoft.Design" CheckId="CA1021">
   <Name>Avoid out parameters</Name>
   <Description>Using out parameters might indicate a design flaw. Although there are legitimate times to use out parameters, their use frequently indicates a design that does not conform to the design guidelines for managed code.</Description>
   <Resolution Name="Default">Consider a design that does not require that {0} be an out parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182131.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813">
   <Name>Avoid unsealed attributes</Name>
   <Description>Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.</Description>
   <Resolution Name="Default">Seal {0}, if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182267.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010">
   <Name>Collections should implement generic interface</Name>
   <Description>Non-generic strongly typed collections should implement one of the generic collection interfaces. This will allow better integration of the collection with generic API.</Description>
   <Resolution Name="Default">{0} appears to be a non-generic, strongly typed collection. Add an implementation to the instance of {1}&lt;T&gt; where T is the underlying element type of {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182132.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberParameterShouldBeDiscreteTerm">In member {0}, the compound word '{1}' in parameter name {2} exists as a discrete term. If your usage is intended to be single word, case it as '{3}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="TypeShouldBeDiscreteTerm">The compound word '{0}' in type name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of {0} as an object named 'sender'.</Resolution>
   <Resolution Name="Second">Declare the second parameter of {0} as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Resolution Name="TooMany">Remove all but the first two parameters of {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019">
   <Name>Define accessors for attribute arguments</Name>
   <Description>Provide accessors for both named and positional arguments. Each positional argument on an attribute should declare a read-only property with the same name (but different casing). Each named argument should provide a read/write property with the same name (but different casing).</Description>
   <Resolution Name="Default">Add a public read-only property accessor for positional argument {0} of Attribute {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182136.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="ExceptionEdge">In method {0}, object {1} is not disposed along all exception paths. Call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIgnoreMethodResults" Category="Microsoft.Usage" CheckId="CA1806">
   <Name>Do not ignore method results</Name>
   <Description>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</Description>
   <Resolution Name="TryParse">{0} calls {1} but does not explicitly check whether the conversion succeeded. Either use the return value in a conditional statement or verify that the call site expects that the out argument will be set to the default value when the conversion fails.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182273.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotLockOnObjectsWithWeakIdentity" Category="Microsoft.Reliability" CheckId="CA2002">
   <Name>Do not lock on objects with weak identity</Name>
   <Description>Don't take locks on objects that may bleed across AppDomains or that don't have a strong identity.</Description>
   <Resolution Name="Default">{0} locks on a reference of type {1}. Replace this with a lock against an object with strong-identity.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182290.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalError</MessageLevel>
   <File Name="reliabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="TooGeneric">{0} creates an exception of type {1}, an exception type that is not sufficiently specific and should never be raised by user code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ICollectionImplementationsHaveStronglyTypedMembers" Category="Microsoft.Design" CheckId="CA1035">
   <Name>ICollection implementations have strongly typed members</Name>
   <Description>Types that implement ICollection should also provide a version of CopyTo with the first parameter set to a strong type, namely a type other than an array of objects or System.Array. Implement the interface member explicitly and make the strongly typed version public. It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a binary tree, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</Description>
   <Resolution Name="Default">{0} should provide a strongly typed implementation of ICollection.CopyTo.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/49stb304.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Assembly">Correct the casing of '{0}' in assembly name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="DelegateParameter">In delegate {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="DelegateParameterAbbreviation">In delegate {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberAbbreviation">Correct the casing of '{0}' in member name {1} by changing it to '{2}'. '{2}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Resolution Name="MemberParameterAbbreviation">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'. '{3}' is an abbreviation and therefore is not subject to acronym casing guidelines.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="DelegateParameter">In delegate {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="DelegateParameterMoreMeaningfulName">In delegate {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberMoreMeaningfulName">Consider providing a more meaningful name than member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentDelegateParameter">In delegate {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, remove the underscores from parameter name {1}.</Resolution>
   <Resolution Name="Type">Remove the underscores from type name {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotHaveIncorrectSuffix" Category="Microsoft.Naming" CheckId="CA1711">
   <Name>Identifiers should not have incorrect suffix</Name>
   <Description>Types that do not extend certain base types should not use reserved name suffixes. Types and members should not use 'Ex' or 'New' to distinguish them from an earlier version of the same API, instead, use a numeric suffix such as '2' or provide a more meaningful suffix. Concrete type implementations and members should not end 'Impl'. Members instead, should either consider using the suggested alternate 'Core' in replacement of 'Impl' or avoid any suffix at all.</Description>
   <Resolution Name="TypeNoAlternate">Rename type name {0} so that it does not end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182247.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IndexersShouldNotBeMultidimensional" Category="Microsoft.Design" CheckId="CA1023">
   <Name>Indexers should not be multidimensional</Name>
   <Description>Indexers (indexed properties) should use a single value (either an integer or string types) for indexing values. Multidimensional indexers can significantly reduce the usability of the library. For example, public object this [int index1, int index2] is a non-intuitive indexer.</Description>
   <Resolution Name="Default">Redesign indexer {0} to use a single string or integer value as its index.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182152.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithComVisible" Category="Microsoft.Design" CheckId="CA1017">
   <Name>Mark assemblies with ComVisibleAttribute</Name>
   <Description>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</Description>
   <Resolution Name="NoAttribute">Because {0} exposes externally visible types, mark it with ComVisible(false) at the assembly level and then mark all types within the assembly that should be exposed to COM clients with ComVisible(true).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182157.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError, Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385967.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="NestedTypesShouldNotBeVisible" Category="Microsoft.Design" CheckId="CA1034">
   <Name>Nested types should not be visible</Name>
   <Description>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</Description>
   <Resolution Name="Default">Do not nest type {0}. Alternatively, change its accessibility so that it is not externally visible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182162.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OperationsShouldNotOverflow" Category="Microsoft.Usage" CheckId="CA2233">
   <Name>Operations should not overflow</Name>
   <Description>Arithmetic operations should not be done without first validating the operands to prevent overflow.</Description>
   <Resolution Name="Default">Correct the potential overflow in the operation '{0}' in {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182354.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OverloadOperatorEqualsOnOverridingValueTypeEquals" Category="Microsoft.Usage" CheckId="CA2231">
   <Name>Overload operator equals on overriding ValueType.Equals</Name>
   <Description>Value types that redefine System.ValueType.Equals should redefine the equality operator as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</Description>
   <Resolution Name="Default">Because {0} is a value type that overrides ValueType.Equals, it should also overload the equality and inequality operators (== and !=).</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182359.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PassSystemUriObjectsInsteadOfStrings" Category="Microsoft.Usage" CheckId="CA2234">
   <Name>Pass System.Uri objects instead of strings</Name>
   <Description>If there are two overloads one taking System.Uri and one taking System.String, library code should never call the string-based overload.</Description>
   <Resolution Name="Default">Modify {0} to call {1} instead of {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182360.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotBeWriteOnly" Category="Microsoft.Design" CheckId="CA1044">
   <Name>Properties should not be write only</Name>
   <Description>Write-only properties usually indicate a flawed design.</Description>
   <Resolution Name="AddGetter">Because property {0} is write-only, either add a property getter with an accessibility that is greater than or equal to its setter or convert this property into a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182165.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="SameType">The property name {0} is confusing given the existence of method {1}. Rename or remove one of these members.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveEmptyFinalizers" Category="Microsoft.Performance" CheckId="CA1821">
   <Name>Remove empty finalizers</Name>
   <Description>Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.</Description>
   <Resolution Name="Default">{0} implements a finalizer that only calls conditionally emitted methods or the base type finalizer. Remove the finalizer or ensure that it is only conditionally compiled into the assembly. If this violation occurs against a finalizer that is entirely wrapped in a conditionally-emitted block of code, suppress this message.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264476.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RemoveUnusedLocals" Category="Microsoft.Performance" CheckId="CA1804">
   <Name>Remove unused locals</Name>
   <Description>Remove locals that are not used or are only assigned to in method implementations.</Description>
   <Resolution Name="Default">{0} declares a variable, {1}, of type {2}, which is never used or is only assigned to. Use this variable or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182278.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182191.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TypesShouldNotExtendCertainBaseTypes" Category="Microsoft.Design" CheckId="CA1058">
   <Name>Types should not extend certain base types</Name>
   <Description>It is best not to extend some base types or to prefer extending better alternatives to those base types.</Description>
   <Resolution Name="System.Collections.ReadOnlyCollectionBase">Change the base type of {0} from {1} to its generic equivalent 'System.Collections.ObjectModel.ReadOnlyCollection'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182171.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054">
   <Name>URI parameters should not be strings</Name>
   <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</Description>
   <Resolution Name="Default">Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182174.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UriPropertiesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1056">
   <Name>URI properties should not be strings</Name>
   <Description>If a property name contains "uri" or "url" or "urn" and it's typed as string, it should be changed to System.Uri.</Description>
   <Resolution Name="Default">Change the type of property {0} from string to System.Uri.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182175.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055">
   <Name>URI return values should not be strings</Name>
   <Description>If a function name contains "uri" or "url" or "urn" and the return type is string, the return type should be changed to System.Uri.</Description>
   <Resolution Name="Default">Change the return type of {0} from string to System.Uri.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182176.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030">
   <Name>Use events where appropriate</Name>
   <Description>A method name suggestive of event functionality was encountered.</Description>
   <Resolution Name="Default">Consider making {0} an event.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182177.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UseGenericsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1007">
   <Name>Use generics where appropriate</Name>
   <Description>References passed to ref parameters must be the exact type of the parameter. Using generics enable the method for general use.</Description>
   <Resolution Name="Default">Consider using generics instead of a reference to System.Object in {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182179.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Local">{0}, a variable declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
